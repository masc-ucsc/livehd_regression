;buildInfoPackage: chisel3, version: 3.2.8, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit Dino1Core : 
  module Control : 
    input clock : Clock
    input reset : Reset
    output io : {flip opcode : UInt<7>, itype : UInt<1>, aluop : UInt<1>, xsrc : UInt<1>, ysrc : UInt<1>, branch : UInt<1>, jal : UInt<1>, jalr : UInt<1>, plus4 : UInt<1>, resultselect : UInt<1>, memop : UInt<2>, toreg : UInt<1>, regwrite : UInt<1>, validinst : UInt<1>}
    
    node _T = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_1 = eq(UInt<6>("h033"), _T) @[Lookup.scala 31:38]
    node _T_2 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_3 = eq(UInt<5>("h013"), _T_2) @[Lookup.scala 31:38]
    node _T_4 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_5 = eq(UInt<2>("h03"), _T_4) @[Lookup.scala 31:38]
    node _T_6 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_7 = eq(UInt<6>("h023"), _T_6) @[Lookup.scala 31:38]
    node _T_8 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_9 = eq(UInt<7>("h063"), _T_8) @[Lookup.scala 31:38]
    node _T_10 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_11 = eq(UInt<6>("h037"), _T_10) @[Lookup.scala 31:38]
    node _T_12 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_13 = eq(UInt<5>("h017"), _T_12) @[Lookup.scala 31:38]
    node _T_14 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_15 = eq(UInt<7>("h06f"), _T_14) @[Lookup.scala 31:38]
    node _T_16 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_17 = eq(UInt<7>("h067"), _T_16) @[Lookup.scala 31:38]
    node _T_18 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_19 = mux(_T_15, UInt<1>("h00"), _T_18) @[Lookup.scala 33:37]
    node _T_20 = mux(_T_13, UInt<1>("h00"), _T_19) @[Lookup.scala 33:37]
    node _T_21 = mux(_T_11, UInt<1>("h00"), _T_20) @[Lookup.scala 33:37]
    node _T_22 = mux(_T_9, UInt<1>("h00"), _T_21) @[Lookup.scala 33:37]
    node _T_23 = mux(_T_7, UInt<1>("h00"), _T_22) @[Lookup.scala 33:37]
    node _T_24 = mux(_T_5, UInt<1>("h00"), _T_23) @[Lookup.scala 33:37]
    node _T_25 = mux(_T_3, UInt<1>("h01"), _T_24) @[Lookup.scala 33:37]
    node signals_0 = mux(_T_1, UInt<1>("h00"), _T_25) @[Lookup.scala 33:37]
    node _T_26 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_27 = mux(_T_15, UInt<1>("h00"), _T_26) @[Lookup.scala 33:37]
    node _T_28 = mux(_T_13, UInt<1>("h00"), _T_27) @[Lookup.scala 33:37]
    node _T_29 = mux(_T_11, UInt<1>("h00"), _T_28) @[Lookup.scala 33:37]
    node _T_30 = mux(_T_9, UInt<1>("h00"), _T_29) @[Lookup.scala 33:37]
    node _T_31 = mux(_T_7, UInt<1>("h00"), _T_30) @[Lookup.scala 33:37]
    node _T_32 = mux(_T_5, UInt<1>("h00"), _T_31) @[Lookup.scala 33:37]
    node _T_33 = mux(_T_3, UInt<1>("h01"), _T_32) @[Lookup.scala 33:37]
    node signals_1 = mux(_T_1, UInt<1>("h01"), _T_33) @[Lookup.scala 33:37]
    node _T_34 = mux(_T_17, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_35 = mux(_T_15, UInt<1>("h01"), _T_34) @[Lookup.scala 33:37]
    node _T_36 = mux(_T_13, UInt<1>("h01"), _T_35) @[Lookup.scala 33:37]
    node _T_37 = mux(_T_11, UInt<1>("h00"), _T_36) @[Lookup.scala 33:37]
    node _T_38 = mux(_T_9, UInt<1>("h00"), _T_37) @[Lookup.scala 33:37]
    node _T_39 = mux(_T_7, UInt<1>("h00"), _T_38) @[Lookup.scala 33:37]
    node _T_40 = mux(_T_5, UInt<1>("h00"), _T_39) @[Lookup.scala 33:37]
    node _T_41 = mux(_T_3, UInt<1>("h00"), _T_40) @[Lookup.scala 33:37]
    node signals_2 = mux(_T_1, UInt<1>("h00"), _T_41) @[Lookup.scala 33:37]
    node _T_42 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_43 = mux(_T_15, UInt<1>("h00"), _T_42) @[Lookup.scala 33:37]
    node _T_44 = mux(_T_13, UInt<1>("h01"), _T_43) @[Lookup.scala 33:37]
    node _T_45 = mux(_T_11, UInt<1>("h00"), _T_44) @[Lookup.scala 33:37]
    node _T_46 = mux(_T_9, UInt<1>("h00"), _T_45) @[Lookup.scala 33:37]
    node _T_47 = mux(_T_7, UInt<1>("h01"), _T_46) @[Lookup.scala 33:37]
    node _T_48 = mux(_T_5, UInt<1>("h01"), _T_47) @[Lookup.scala 33:37]
    node _T_49 = mux(_T_3, UInt<1>("h01"), _T_48) @[Lookup.scala 33:37]
    node signals_3 = mux(_T_1, UInt<1>("h00"), _T_49) @[Lookup.scala 33:37]
    node _T_50 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_51 = mux(_T_15, UInt<1>("h00"), _T_50) @[Lookup.scala 33:37]
    node _T_52 = mux(_T_13, UInt<1>("h00"), _T_51) @[Lookup.scala 33:37]
    node _T_53 = mux(_T_11, UInt<1>("h00"), _T_52) @[Lookup.scala 33:37]
    node _T_54 = mux(_T_9, UInt<1>("h01"), _T_53) @[Lookup.scala 33:37]
    node _T_55 = mux(_T_7, UInt<1>("h00"), _T_54) @[Lookup.scala 33:37]
    node _T_56 = mux(_T_5, UInt<1>("h00"), _T_55) @[Lookup.scala 33:37]
    node _T_57 = mux(_T_3, UInt<1>("h00"), _T_56) @[Lookup.scala 33:37]
    node signals_4 = mux(_T_1, UInt<1>("h00"), _T_57) @[Lookup.scala 33:37]
    node _T_58 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_59 = mux(_T_15, UInt<1>("h01"), _T_58) @[Lookup.scala 33:37]
    node _T_60 = mux(_T_13, UInt<1>("h00"), _T_59) @[Lookup.scala 33:37]
    node _T_61 = mux(_T_11, UInt<1>("h00"), _T_60) @[Lookup.scala 33:37]
    node _T_62 = mux(_T_9, UInt<1>("h00"), _T_61) @[Lookup.scala 33:37]
    node _T_63 = mux(_T_7, UInt<1>("h00"), _T_62) @[Lookup.scala 33:37]
    node _T_64 = mux(_T_5, UInt<1>("h00"), _T_63) @[Lookup.scala 33:37]
    node _T_65 = mux(_T_3, UInt<1>("h00"), _T_64) @[Lookup.scala 33:37]
    node signals_5 = mux(_T_1, UInt<1>("h00"), _T_65) @[Lookup.scala 33:37]
    node _T_66 = mux(_T_17, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_67 = mux(_T_15, UInt<1>("h00"), _T_66) @[Lookup.scala 33:37]
    node _T_68 = mux(_T_13, UInt<1>("h00"), _T_67) @[Lookup.scala 33:37]
    node _T_69 = mux(_T_11, UInt<1>("h00"), _T_68) @[Lookup.scala 33:37]
    node _T_70 = mux(_T_9, UInt<1>("h00"), _T_69) @[Lookup.scala 33:37]
    node _T_71 = mux(_T_7, UInt<1>("h00"), _T_70) @[Lookup.scala 33:37]
    node _T_72 = mux(_T_5, UInt<1>("h00"), _T_71) @[Lookup.scala 33:37]
    node _T_73 = mux(_T_3, UInt<1>("h00"), _T_72) @[Lookup.scala 33:37]
    node signals_6 = mux(_T_1, UInt<1>("h00"), _T_73) @[Lookup.scala 33:37]
    node _T_74 = mux(_T_17, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_75 = mux(_T_15, UInt<1>("h01"), _T_74) @[Lookup.scala 33:37]
    node _T_76 = mux(_T_13, UInt<1>("h00"), _T_75) @[Lookup.scala 33:37]
    node _T_77 = mux(_T_11, UInt<1>("h00"), _T_76) @[Lookup.scala 33:37]
    node _T_78 = mux(_T_9, UInt<1>("h00"), _T_77) @[Lookup.scala 33:37]
    node _T_79 = mux(_T_7, UInt<1>("h00"), _T_78) @[Lookup.scala 33:37]
    node _T_80 = mux(_T_5, UInt<1>("h00"), _T_79) @[Lookup.scala 33:37]
    node _T_81 = mux(_T_3, UInt<1>("h00"), _T_80) @[Lookup.scala 33:37]
    node signals_7 = mux(_T_1, UInt<1>("h00"), _T_81) @[Lookup.scala 33:37]
    node _T_82 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_83 = mux(_T_15, UInt<1>("h00"), _T_82) @[Lookup.scala 33:37]
    node _T_84 = mux(_T_13, UInt<1>("h00"), _T_83) @[Lookup.scala 33:37]
    node _T_85 = mux(_T_11, UInt<1>("h01"), _T_84) @[Lookup.scala 33:37]
    node _T_86 = mux(_T_9, UInt<1>("h00"), _T_85) @[Lookup.scala 33:37]
    node _T_87 = mux(_T_7, UInt<1>("h00"), _T_86) @[Lookup.scala 33:37]
    node _T_88 = mux(_T_5, UInt<1>("h00"), _T_87) @[Lookup.scala 33:37]
    node _T_89 = mux(_T_3, UInt<1>("h00"), _T_88) @[Lookup.scala 33:37]
    node signals_8 = mux(_T_1, UInt<1>("h00"), _T_89) @[Lookup.scala 33:37]
    node _T_90 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_91 = mux(_T_15, UInt<1>("h00"), _T_90) @[Lookup.scala 33:37]
    node _T_92 = mux(_T_13, UInt<1>("h00"), _T_91) @[Lookup.scala 33:37]
    node _T_93 = mux(_T_11, UInt<1>("h00"), _T_92) @[Lookup.scala 33:37]
    node _T_94 = mux(_T_9, UInt<1>("h00"), _T_93) @[Lookup.scala 33:37]
    node _T_95 = mux(_T_7, UInt<2>("h03"), _T_94) @[Lookup.scala 33:37]
    node _T_96 = mux(_T_5, UInt<2>("h02"), _T_95) @[Lookup.scala 33:37]
    node _T_97 = mux(_T_3, UInt<1>("h00"), _T_96) @[Lookup.scala 33:37]
    node signals_9 = mux(_T_1, UInt<1>("h00"), _T_97) @[Lookup.scala 33:37]
    node _T_98 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_99 = mux(_T_15, UInt<1>("h00"), _T_98) @[Lookup.scala 33:37]
    node _T_100 = mux(_T_13, UInt<1>("h00"), _T_99) @[Lookup.scala 33:37]
    node _T_101 = mux(_T_11, UInt<1>("h00"), _T_100) @[Lookup.scala 33:37]
    node _T_102 = mux(_T_9, UInt<1>("h00"), _T_101) @[Lookup.scala 33:37]
    node _T_103 = mux(_T_7, UInt<1>("h00"), _T_102) @[Lookup.scala 33:37]
    node _T_104 = mux(_T_5, UInt<1>("h01"), _T_103) @[Lookup.scala 33:37]
    node _T_105 = mux(_T_3, UInt<1>("h00"), _T_104) @[Lookup.scala 33:37]
    node signals_10 = mux(_T_1, UInt<1>("h00"), _T_105) @[Lookup.scala 33:37]
    node _T_106 = mux(_T_17, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_107 = mux(_T_15, UInt<1>("h01"), _T_106) @[Lookup.scala 33:37]
    node _T_108 = mux(_T_13, UInt<1>("h01"), _T_107) @[Lookup.scala 33:37]
    node _T_109 = mux(_T_11, UInt<1>("h01"), _T_108) @[Lookup.scala 33:37]
    node _T_110 = mux(_T_9, UInt<1>("h00"), _T_109) @[Lookup.scala 33:37]
    node _T_111 = mux(_T_7, UInt<1>("h00"), _T_110) @[Lookup.scala 33:37]
    node _T_112 = mux(_T_5, UInt<1>("h01"), _T_111) @[Lookup.scala 33:37]
    node _T_113 = mux(_T_3, UInt<1>("h01"), _T_112) @[Lookup.scala 33:37]
    node signals_11 = mux(_T_1, UInt<1>("h01"), _T_113) @[Lookup.scala 33:37]
    node _T_114 = mux(_T_17, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_115 = mux(_T_15, UInt<1>("h01"), _T_114) @[Lookup.scala 33:37]
    node _T_116 = mux(_T_13, UInt<1>("h01"), _T_115) @[Lookup.scala 33:37]
    node _T_117 = mux(_T_11, UInt<1>("h01"), _T_116) @[Lookup.scala 33:37]
    node _T_118 = mux(_T_9, UInt<1>("h01"), _T_117) @[Lookup.scala 33:37]
    node _T_119 = mux(_T_7, UInt<1>("h01"), _T_118) @[Lookup.scala 33:37]
    node _T_120 = mux(_T_5, UInt<1>("h01"), _T_119) @[Lookup.scala 33:37]
    node _T_121 = mux(_T_3, UInt<1>("h01"), _T_120) @[Lookup.scala 33:37]
    node signals_12 = mux(_T_1, UInt<1>("h01"), _T_121) @[Lookup.scala 33:37]
    io.itype <= signals_0 @[control.scala 76:19]
    io.aluop <= signals_1 @[control.scala 77:19]
    io.xsrc <= signals_2 @[control.scala 78:19]
    io.ysrc <= signals_3 @[control.scala 79:19]
    io.branch <= signals_4 @[control.scala 80:19]
    io.jal <= signals_5 @[control.scala 81:19]
    io.jalr <= signals_6 @[control.scala 82:19]
    io.plus4 <= signals_7 @[control.scala 83:19]
    io.resultselect <= signals_8 @[control.scala 84:19]
    io.memop <= signals_9 @[control.scala 85:19]
    io.toreg <= signals_10 @[control.scala 86:19]
    io.regwrite <= signals_11 @[control.scala 87:19]
    io.validinst <= signals_12 @[control.scala 88:19]
    
  module RegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip readreg1 : UInt<5>, flip readreg2 : UInt<5>, flip writereg : UInt<5>, flip writedata : UInt<32>, flip wen : UInt<1>, readdata1 : UInt<32>, readdata2 : UInt<32>}
    
    reg regs : UInt<32>[32], clock @[register-file.scala 52:17]
    when io.wen : @[register-file.scala 55:17]
      regs[io.writereg] <= io.writedata @[register-file.scala 56:23]
      skip @[register-file.scala 55:17]
    io.readdata1 <= regs[io.readreg1] @[register-file.scala 61:16]
    io.readdata2 <= regs[io.readreg2] @[register-file.scala 62:16]
    node _T = eq(io.readreg1, io.writereg) @[register-file.scala 66:23]
    node _T_1 = and(_T, io.wen) @[register-file.scala 66:39]
    when _T_1 : @[register-file.scala 66:50]
      io.readdata1 <= io.writedata @[register-file.scala 67:20]
      skip @[register-file.scala 66:50]
    else : @[register-file.scala 68:57]
      node _T_2 = eq(io.readreg2, io.writereg) @[register-file.scala 68:30]
      node _T_3 = and(_T_2, io.wen) @[register-file.scala 68:46]
      when _T_3 : @[register-file.scala 68:57]
        io.readdata2 <= io.writedata @[register-file.scala 69:20]
        skip @[register-file.scala 68:57]
    
  module ALUControl : 
    input clock : Clock
    input reset : Reset
    output io : {flip aluop : UInt<1>, flip itype : UInt<1>, flip funct7 : UInt<7>, flip funct3 : UInt<3>, operation : UInt<4>}
    
    when io.aluop : @[alucontrol.scala 30:19]
      node _T = eq(io.funct3, UInt<1>("h00")) @[alucontrol.scala 31:21]
      when _T : @[alucontrol.scala 31:35]
        node _T_1 = eq(io.funct7, UInt<1>("h00")) @[alucontrol.scala 32:35]
        node _T_2 = or(io.itype, _T_1) @[alucontrol.scala 32:22]
        when _T_2 : @[alucontrol.scala 32:53]
          io.operation <= UInt<3>("h07") @[alucontrol.scala 33:22]
          skip @[alucontrol.scala 32:53]
        else : @[alucontrol.scala 34:20]
          io.operation <= UInt<3>("h04") @[alucontrol.scala 35:22]
          skip @[alucontrol.scala 34:20]
        skip @[alucontrol.scala 31:35]
      else : @[alucontrol.scala 38:40]
        node _T_3 = eq(io.funct3, UInt<1>("h01")) @[alucontrol.scala 38:26]
        when _T_3 : @[alucontrol.scala 38:40]
          io.operation <= UInt<4>("h08") @[alucontrol.scala 38:55]
          skip @[alucontrol.scala 38:40]
        else : @[alucontrol.scala 39:40]
          node _T_4 = eq(io.funct3, UInt<2>("h02")) @[alucontrol.scala 39:26]
          when _T_4 : @[alucontrol.scala 39:40]
            io.operation <= UInt<4>("h09") @[alucontrol.scala 39:55]
            skip @[alucontrol.scala 39:40]
          else : @[alucontrol.scala 40:40]
            node _T_5 = eq(io.funct3, UInt<2>("h03")) @[alucontrol.scala 40:26]
            when _T_5 : @[alucontrol.scala 40:40]
              io.operation <= UInt<1>("h01") @[alucontrol.scala 40:55]
              skip @[alucontrol.scala 40:40]
            else : @[alucontrol.scala 41:40]
              node _T_6 = eq(io.funct3, UInt<3>("h04")) @[alucontrol.scala 41:26]
              when _T_6 : @[alucontrol.scala 41:40]
                io.operation <= UInt<1>("h00") @[alucontrol.scala 41:55]
                skip @[alucontrol.scala 41:40]
              else : @[alucontrol.scala 42:40]
                node _T_7 = eq(io.funct3, UInt<3>("h05")) @[alucontrol.scala 42:26]
                when _T_7 : @[alucontrol.scala 42:40]
                  node _T_8 = eq(io.funct7, UInt<1>("h00")) @[alucontrol.scala 43:23]
                  when _T_8 : @[alucontrol.scala 43:41]
                    io.operation <= UInt<2>("h02") @[alucontrol.scala 44:22]
                    skip @[alucontrol.scala 43:41]
                  else : @[alucontrol.scala 45:20]
                    io.operation <= UInt<2>("h03") @[alucontrol.scala 46:22]
                    skip @[alucontrol.scala 45:20]
                  skip @[alucontrol.scala 42:40]
                else : @[alucontrol.scala 49:40]
                  node _T_9 = eq(io.funct3, UInt<3>("h06")) @[alucontrol.scala 49:26]
                  when _T_9 : @[alucontrol.scala 49:40]
                    io.operation <= UInt<3>("h05") @[alucontrol.scala 49:55]
                    skip @[alucontrol.scala 49:40]
                  else : @[alucontrol.scala 51:5]
                    io.operation <= UInt<3>("h06") @[alucontrol.scala 51:20]
                    skip @[alucontrol.scala 51:5]
      skip @[alucontrol.scala 30:19]
    else : @[alucontrol.scala 52:16]
      io.operation <= UInt<3>("h07") @[alucontrol.scala 53:18]
      skip @[alucontrol.scala 52:16]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip operation : UInt<4>, flip inputx : UInt<32>, flip inputy : UInt<32>, result : UInt<32>}
    
    node _T = eq(io.operation, UInt<3>("h06")) @[alu.scala 25:22]
    when _T : @[alu.scala 25:37]
      node _T_1 = and(io.inputx, io.inputy) @[alu.scala 26:28]
      io.result <= _T_1 @[alu.scala 26:15]
      skip @[alu.scala 25:37]
    else : @[alu.scala 28:42]
      node _T_2 = eq(io.operation, UInt<3>("h05")) @[alu.scala 28:27]
      when _T_2 : @[alu.scala 28:42]
        node _T_3 = or(io.inputx, io.inputy) @[alu.scala 29:28]
        io.result <= _T_3 @[alu.scala 29:15]
        skip @[alu.scala 28:42]
      else : @[alu.scala 31:42]
        node _T_4 = eq(io.operation, UInt<3>("h07")) @[alu.scala 31:27]
        when _T_4 : @[alu.scala 31:42]
          node _T_5 = add(io.inputx, io.inputy) @[alu.scala 32:28]
          node _T_6 = tail(_T_5, 1) @[alu.scala 32:28]
          io.result <= _T_6 @[alu.scala 32:15]
          skip @[alu.scala 31:42]
        else : @[alu.scala 34:42]
          node _T_7 = eq(io.operation, UInt<3>("h04")) @[alu.scala 34:27]
          when _T_7 : @[alu.scala 34:42]
            node _T_8 = sub(io.inputx, io.inputy) @[alu.scala 35:28]
            node _T_9 = tail(_T_8, 1) @[alu.scala 35:28]
            io.result <= _T_9 @[alu.scala 35:15]
            skip @[alu.scala 34:42]
          else : @[alu.scala 37:42]
            node _T_10 = eq(io.operation, UInt<2>("h03")) @[alu.scala 37:27]
            when _T_10 : @[alu.scala 37:42]
              node _T_11 = asSInt(io.inputx) @[alu.scala 38:29]
              node _T_12 = bits(io.inputy, 4, 0) @[alu.scala 38:48]
              node _T_13 = dshr(_T_11, _T_12) @[alu.scala 38:36]
              node _T_14 = asUInt(_T_13) @[alu.scala 38:55]
              io.result <= _T_14 @[alu.scala 38:15]
              skip @[alu.scala 37:42]
            else : @[alu.scala 40:42]
              node _T_15 = eq(io.operation, UInt<1>("h01")) @[alu.scala 40:27]
              when _T_15 : @[alu.scala 40:42]
                node _T_16 = lt(io.inputx, io.inputy) @[alu.scala 41:29]
                io.result <= _T_16 @[alu.scala 41:15]
                skip @[alu.scala 40:42]
              else : @[alu.scala 43:42]
                node _T_17 = eq(io.operation, UInt<1>("h00")) @[alu.scala 43:27]
                when _T_17 : @[alu.scala 43:42]
                  node _T_18 = xor(io.inputx, io.inputy) @[alu.scala 44:28]
                  io.result <= _T_18 @[alu.scala 44:15]
                  skip @[alu.scala 43:42]
                else : @[alu.scala 46:42]
                  node _T_19 = eq(io.operation, UInt<2>("h02")) @[alu.scala 46:27]
                  when _T_19 : @[alu.scala 46:42]
                    node _T_20 = bits(io.inputy, 4, 0) @[alu.scala 47:40]
                    node _T_21 = dshr(io.inputx, _T_20) @[alu.scala 47:28]
                    io.result <= _T_21 @[alu.scala 47:15]
                    skip @[alu.scala 46:42]
                  else : @[alu.scala 49:42]
                    node _T_22 = eq(io.operation, UInt<4>("h09")) @[alu.scala 49:27]
                    when _T_22 : @[alu.scala 49:42]
                      node _T_23 = asSInt(io.inputx) @[alu.scala 50:29]
                      node _T_24 = asSInt(io.inputy) @[alu.scala 50:48]
                      node _T_25 = lt(_T_23, _T_24) @[alu.scala 50:36]
                      io.result <= _T_25 @[alu.scala 50:15]
                      skip @[alu.scala 49:42]
                    else : @[alu.scala 52:42]
                      node _T_26 = eq(io.operation, UInt<4>("h08")) @[alu.scala 52:27]
                      when _T_26 : @[alu.scala 52:42]
                        node _T_27 = bits(io.inputy, 4, 0) @[alu.scala 53:40]
                        node _T_28 = dshl(io.inputx, _T_27) @[alu.scala 53:28]
                        io.result <= _T_28 @[alu.scala 53:15]
                        skip @[alu.scala 52:42]
                      else : @[alu.scala 55:42]
                        node _T_29 = eq(io.operation, UInt<4>("h0a")) @[alu.scala 55:27]
                        when _T_29 : @[alu.scala 55:42]
                          node _T_30 = or(io.inputx, io.inputy) @[alu.scala 56:30]
                          node _T_31 = not(_T_30) @[alu.scala 56:18]
                          io.result <= _T_31 @[alu.scala 56:15]
                          skip @[alu.scala 55:42]
                        else : @[alu.scala 58:42]
                          node _T_32 = eq(io.operation, UInt<4>("h0b")) @[alu.scala 58:27]
                          when _T_32 : @[alu.scala 58:42]
                            node _T_33 = asSInt(io.inputx) @[alu.scala 59:29]
                            node _T_34 = asSInt(io.inputy) @[alu.scala 59:49]
                            node _T_35 = geq(_T_33, _T_34) @[alu.scala 59:36]
                            io.result <= _T_35 @[alu.scala 59:15]
                            skip @[alu.scala 58:42]
                          else : @[alu.scala 61:42]
                            node _T_36 = eq(io.operation, UInt<4>("h0c")) @[alu.scala 61:27]
                            when _T_36 : @[alu.scala 61:42]
                              node _T_37 = geq(io.inputx, io.inputy) @[alu.scala 62:29]
                              io.result <= _T_37 @[alu.scala 62:15]
                              skip @[alu.scala 61:42]
                            else : @[alu.scala 64:42]
                              node _T_38 = eq(io.operation, UInt<4>("h0d")) @[alu.scala 64:27]
                              when _T_38 : @[alu.scala 64:42]
                                node _T_39 = eq(io.inputx, io.inputy) @[alu.scala 65:28]
                                io.result <= _T_39 @[alu.scala 65:15]
                                skip @[alu.scala 64:42]
                              else : @[alu.scala 67:42]
                                node _T_40 = eq(io.operation, UInt<4>("h0e")) @[alu.scala 67:27]
                                when _T_40 : @[alu.scala 67:42]
                                  node _T_41 = neq(io.inputx, io.inputy) @[alu.scala 68:28]
                                  io.result <= _T_41 @[alu.scala 68:15]
                                  skip @[alu.scala 67:42]
                                else : @[alu.scala 70:14]
                                  io.result <= UInt<1>("h00") @[alu.scala 71:15]
                                  skip @[alu.scala 70:14]
    
  module ImmediateGenerator : 
    input clock : Clock
    input reset : Reset
    output io : {flip instruction : UInt<32>, sextImm : UInt<32>}
    
    io.sextImm <= UInt<1>("h00") @[helpers.scala 42:14]
    node opcode = bits(io.instruction, 6, 0) @[helpers.scala 44:30]
    node _T = eq(UInt<6>("h037"), opcode) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = bits(io.instruction, 31, 12) @[helpers.scala 47:31]
      node _T_2 = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
      node _T_3 = cat(_T_1, _T_2) @[Cat.scala 30:58]
      io.sextImm <= _T_3 @[helpers.scala 48:18]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_4 = eq(UInt<5>("h017"), opcode) @[Conditional.scala 37:30]
      when _T_4 : @[Conditional.scala 39:67]
        node _T_5 = bits(io.instruction, 31, 12) @[helpers.scala 51:31]
        node _T_6 = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
        node _T_7 = cat(_T_5, _T_6) @[Cat.scala 30:58]
        io.sextImm <= _T_7 @[helpers.scala 52:18]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_8 = eq(UInt<7>("h06f"), opcode) @[Conditional.scala 37:30]
        when _T_8 : @[Conditional.scala 39:67]
          node _T_9 = bits(io.instruction, 31, 31) @[helpers.scala 55:35]
          node _T_10 = bits(io.instruction, 19, 12) @[helpers.scala 55:55]
          node _T_11 = bits(io.instruction, 20, 20) @[helpers.scala 56:35]
          node _T_12 = bits(io.instruction, 30, 21) @[helpers.scala 56:55]
          node _T_13 = cat(_T_11, _T_12) @[Cat.scala 30:58]
          node _T_14 = cat(_T_9, _T_10) @[Cat.scala 30:58]
          node _T_15 = cat(_T_14, _T_13) @[Cat.scala 30:58]
          node _T_16 = bits(_T_15, 19, 19) @[helpers.scala 57:36]
          node _T_17 = bits(_T_16, 0, 0) @[Bitwise.scala 72:15]
          node _T_18 = mux(_T_17, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
          node _T_19 = cat(_T_18, _T_15) @[Cat.scala 30:58]
          node _T_20 = cat(_T_19, UInt<1>("h00")) @[Cat.scala 30:58]
          io.sextImm <= _T_20 @[helpers.scala 57:18]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_21 = eq(UInt<7>("h067"), opcode) @[Conditional.scala 37:30]
          when _T_21 : @[Conditional.scala 39:67]
            node _T_22 = bits(io.instruction, 31, 20) @[helpers.scala 60:31]
            node _T_23 = bits(_T_22, 11, 11) @[helpers.scala 61:36]
            node _T_24 = bits(_T_23, 0, 0) @[Bitwise.scala 72:15]
            node _T_25 = mux(_T_24, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
            node _T_26 = cat(_T_25, _T_22) @[Cat.scala 30:58]
            io.sextImm <= _T_26 @[helpers.scala 61:18]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_27 = eq(UInt<7>("h063"), opcode) @[Conditional.scala 37:30]
            when _T_27 : @[Conditional.scala 39:67]
              node _T_28 = bits(io.instruction, 31, 31) @[helpers.scala 64:35]
              node _T_29 = bits(io.instruction, 7, 7) @[helpers.scala 64:55]
              node _T_30 = bits(io.instruction, 30, 25) @[helpers.scala 65:35]
              node _T_31 = bits(io.instruction, 11, 8) @[helpers.scala 65:58]
              node _T_32 = cat(_T_30, _T_31) @[Cat.scala 30:58]
              node _T_33 = cat(_T_28, _T_29) @[Cat.scala 30:58]
              node _T_34 = cat(_T_33, _T_32) @[Cat.scala 30:58]
              node _T_35 = bits(_T_34, 11, 11) @[helpers.scala 66:37]
              node _T_36 = bits(_T_35, 0, 0) @[Bitwise.scala 72:15]
              node _T_37 = mux(_T_36, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
              node _T_38 = cat(_T_37, _T_34) @[Cat.scala 30:58]
              node _T_39 = cat(_T_38, UInt<1>("h00")) @[Cat.scala 30:58]
              io.sextImm <= _T_39 @[helpers.scala 66:18]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_40 = eq(UInt<2>("h03"), opcode) @[Conditional.scala 37:30]
              when _T_40 : @[Conditional.scala 39:67]
                node _T_41 = bits(io.instruction, 31, 20) @[helpers.scala 69:31]
                node _T_42 = bits(_T_41, 11, 11) @[helpers.scala 70:36]
                node _T_43 = bits(_T_42, 0, 0) @[Bitwise.scala 72:15]
                node _T_44 = mux(_T_43, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
                node _T_45 = cat(_T_44, _T_41) @[Cat.scala 30:58]
                io.sextImm <= _T_45 @[helpers.scala 70:18]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_46 = eq(UInt<6>("h023"), opcode) @[Conditional.scala 37:30]
                when _T_46 : @[Conditional.scala 39:67]
                  node _T_47 = bits(io.instruction, 31, 25) @[helpers.scala 73:35]
                  node _T_48 = bits(io.instruction, 11, 7) @[helpers.scala 73:59]
                  node _T_49 = cat(_T_47, _T_48) @[Cat.scala 30:58]
                  node _T_50 = bits(_T_49, 11, 11) @[helpers.scala 74:36]
                  node _T_51 = bits(_T_50, 0, 0) @[Bitwise.scala 72:15]
                  node _T_52 = mux(_T_51, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
                  node _T_53 = cat(_T_52, _T_49) @[Cat.scala 30:58]
                  io.sextImm <= _T_53 @[helpers.scala 74:18]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_54 = eq(UInt<5>("h013"), opcode) @[Conditional.scala 37:30]
                  when _T_54 : @[Conditional.scala 39:67]
                    node _T_55 = bits(io.instruction, 31, 20) @[helpers.scala 77:31]
                    node _T_56 = bits(_T_55, 11, 11) @[helpers.scala 78:36]
                    node _T_57 = bits(_T_56, 0, 0) @[Bitwise.scala 72:15]
                    node _T_58 = mux(_T_57, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
                    node _T_59 = cat(_T_58, _T_55) @[Cat.scala 30:58]
                    io.sextImm <= _T_59 @[helpers.scala 78:18]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_60 = eq(UInt<7>("h073"), opcode) @[Conditional.scala 37:30]
                    when _T_60 : @[Conditional.scala 39:67]
                      node _T_61 = mux(UInt<1>("h00"), UInt<27>("h07ffffff"), UInt<27>("h00")) @[Bitwise.scala 72:12]
                      node _T_62 = bits(io.instruction, 19, 15) @[helpers.scala 81:53]
                      node _T_63 = cat(_T_61, _T_62) @[Cat.scala 30:58]
                      io.sextImm <= _T_63 @[helpers.scala 81:18]
                      skip @[Conditional.scala 39:67]
    
  module Adder : 
    input clock : Clock
    input reset : Reset
    output io : {flip inputx : UInt<32>, flip inputy : UInt<32>, result : UInt<32>}
    
    node _T = add(io.inputx, io.inputy) @[helpers.scala 23:26]
    node _T_1 = tail(_T, 1) @[helpers.scala 23:26]
    io.result <= _T_1 @[helpers.scala 23:13]
    
  module NextPC : 
    input clock : Clock
    input reset : Reset
    output io : {flip branch : UInt<1>, flip jal : UInt<1>, flip jalr : UInt<1>, flip inputx : UInt<32>, flip inputy : UInt<32>, flip funct3 : UInt<3>, flip pc : UInt<32>, flip imm : UInt<32>, nextpc : UInt<32>, taken : UInt<1>}
    
    when io.branch : @[nextpc.scala 38:20]
      node _T = eq(io.funct3, UInt<1>("h00")) @[nextpc.scala 39:21]
      when _T : @[nextpc.scala 39:40]
        node _T_1 = eq(io.inputx, io.inputy) @[nextpc.scala 39:64]
        io.taken <= _T_1 @[nextpc.scala 39:51]
        skip @[nextpc.scala 39:40]
      else : @[nextpc.scala 40:40]
        node _T_2 = eq(io.funct3, UInt<1>("h01")) @[nextpc.scala 40:26]
        when _T_2 : @[nextpc.scala 40:40]
          node _T_3 = neq(io.inputx, io.inputy) @[nextpc.scala 40:64]
          io.taken <= _T_3 @[nextpc.scala 40:51]
          skip @[nextpc.scala 40:40]
        else : @[nextpc.scala 41:40]
          node _T_4 = eq(io.funct3, UInt<3>("h04")) @[nextpc.scala 41:26]
          when _T_4 : @[nextpc.scala 41:40]
            node _T_5 = asSInt(io.inputx) @[nextpc.scala 41:65]
            node _T_6 = asSInt(io.inputy) @[nextpc.scala 41:84]
            node _T_7 = lt(_T_5, _T_6) @[nextpc.scala 41:72]
            io.taken <= _T_7 @[nextpc.scala 41:51]
            skip @[nextpc.scala 41:40]
          else : @[nextpc.scala 42:40]
            node _T_8 = eq(io.funct3, UInt<3>("h05")) @[nextpc.scala 42:26]
            when _T_8 : @[nextpc.scala 42:40]
              node _T_9 = asSInt(io.inputx) @[nextpc.scala 42:65]
              node _T_10 = asSInt(io.inputy) @[nextpc.scala 42:85]
              node _T_11 = geq(_T_9, _T_10) @[nextpc.scala 42:72]
              io.taken <= _T_11 @[nextpc.scala 42:51]
              skip @[nextpc.scala 42:40]
            else : @[nextpc.scala 43:40]
              node _T_12 = eq(io.funct3, UInt<3>("h06")) @[nextpc.scala 43:26]
              when _T_12 : @[nextpc.scala 43:40]
                node _T_13 = lt(io.inputx, io.inputy) @[nextpc.scala 43:64]
                io.taken <= _T_13 @[nextpc.scala 43:51]
                skip @[nextpc.scala 43:40]
              else : @[nextpc.scala 44:40]
                node _T_14 = eq(io.funct3, UInt<3>("h07")) @[nextpc.scala 44:26]
                when _T_14 : @[nextpc.scala 44:40]
                  node _T_15 = geq(io.inputx, io.inputy) @[nextpc.scala 44:64]
                  io.taken <= _T_15 @[nextpc.scala 44:51]
                  skip @[nextpc.scala 44:40]
                else : @[nextpc.scala 45:40]
                  io.taken <= UInt<1>("h00") @[nextpc.scala 45:51]
                  skip @[nextpc.scala 45:40]
      when io.taken : @[nextpc.scala 47:21]
        node _T_16 = add(io.pc, io.imm) @[nextpc.scala 48:26]
        node _T_17 = tail(_T_16, 1) @[nextpc.scala 48:26]
        io.nextpc <= _T_17 @[nextpc.scala 48:17]
        skip @[nextpc.scala 47:21]
      else : @[nextpc.scala 49:18]
        node _T_18 = add(io.pc, UInt<3>("h04")) @[nextpc.scala 50:26]
        node _T_19 = tail(_T_18, 1) @[nextpc.scala 50:26]
        io.nextpc <= _T_19 @[nextpc.scala 50:17]
        skip @[nextpc.scala 49:18]
      skip @[nextpc.scala 38:20]
    else : @[nextpc.scala 52:24]
      when io.jal : @[nextpc.scala 52:24]
        io.taken <= UInt<1>("h01") @[nextpc.scala 53:14]
        node _T_20 = add(io.pc, io.imm) @[nextpc.scala 54:24]
        node _T_21 = tail(_T_20, 1) @[nextpc.scala 54:24]
        io.nextpc <= _T_21 @[nextpc.scala 54:15]
        skip @[nextpc.scala 52:24]
      else : @[nextpc.scala 55:25]
        when io.jalr : @[nextpc.scala 55:25]
          io.taken <= UInt<1>("h01") @[nextpc.scala 56:14]
          node _T_22 = add(io.inputx, io.imm) @[nextpc.scala 57:28]
          node _T_23 = tail(_T_22, 1) @[nextpc.scala 57:28]
          io.nextpc <= _T_23 @[nextpc.scala 57:15]
          skip @[nextpc.scala 55:25]
        else : @[nextpc.scala 58:16]
          node _T_24 = add(io.pc, UInt<3>("h04")) @[nextpc.scala 59:24]
          node _T_25 = tail(_T_24, 1) @[nextpc.scala 59:24]
          io.nextpc <= _T_25 @[nextpc.scala 59:15]
          io.taken <= UInt<1>("h00") @[nextpc.scala 60:15]
          skip @[nextpc.scala 58:16]
    
  module ForwardingUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip exmemrd : UInt<5>, flip exmemrw : UInt<1>, flip memwbrd : UInt<5>, flip memwbrw : UInt<1>, forwardA : UInt<2>, forwardB : UInt<2>}
    
    node _T = eq(io.exmemrw, UInt<1>("h01")) @[forwarding.scala 40:20]
    node _T_1 = eq(io.exmemrd, io.rs1) @[forwarding.scala 40:45]
    node _T_2 = and(_T, _T_1) @[forwarding.scala 40:31]
    node _T_3 = neq(io.exmemrd, UInt<1>("h00")) @[forwarding.scala 40:70]
    node _T_4 = and(_T_2, _T_3) @[forwarding.scala 40:56]
    when _T_4 : @[forwarding.scala 40:79]
      io.forwardA <= UInt<1>("h01") @[forwarding.scala 41:17]
      skip @[forwarding.scala 40:79]
    else : @[forwarding.scala 43:84]
      node _T_5 = eq(io.memwbrw, UInt<1>("h01")) @[forwarding.scala 43:25]
      node _T_6 = eq(io.memwbrd, io.rs1) @[forwarding.scala 43:50]
      node _T_7 = and(_T_5, _T_6) @[forwarding.scala 43:36]
      node _T_8 = neq(io.memwbrd, UInt<1>("h00")) @[forwarding.scala 43:75]
      node _T_9 = and(_T_7, _T_8) @[forwarding.scala 43:61]
      when _T_9 : @[forwarding.scala 43:84]
        io.forwardA <= UInt<2>("h02") @[forwarding.scala 44:17]
        skip @[forwarding.scala 43:84]
      else : @[forwarding.scala 46:14]
        io.forwardA <= UInt<1>("h00") @[forwarding.scala 47:17]
        skip @[forwarding.scala 46:14]
    node _T_10 = eq(io.exmemrw, UInt<1>("h01")) @[forwarding.scala 50:20]
    node _T_11 = eq(io.exmemrd, io.rs2) @[forwarding.scala 50:45]
    node _T_12 = and(_T_10, _T_11) @[forwarding.scala 50:31]
    node _T_13 = neq(io.exmemrd, UInt<1>("h00")) @[forwarding.scala 50:70]
    node _T_14 = and(_T_12, _T_13) @[forwarding.scala 50:56]
    when _T_14 : @[forwarding.scala 50:79]
      io.forwardB <= UInt<1>("h01") @[forwarding.scala 51:17]
      skip @[forwarding.scala 50:79]
    else : @[forwarding.scala 53:84]
      node _T_15 = eq(io.memwbrw, UInt<1>("h01")) @[forwarding.scala 53:25]
      node _T_16 = eq(io.memwbrd, io.rs2) @[forwarding.scala 53:50]
      node _T_17 = and(_T_15, _T_16) @[forwarding.scala 53:36]
      node _T_18 = neq(io.memwbrd, UInt<1>("h00")) @[forwarding.scala 53:75]
      node _T_19 = and(_T_17, _T_18) @[forwarding.scala 53:61]
      when _T_19 : @[forwarding.scala 53:84]
        io.forwardB <= UInt<2>("h02") @[forwarding.scala 54:17]
        skip @[forwarding.scala 53:84]
      else : @[forwarding.scala 56:14]
        io.forwardB <= UInt<1>("h00") @[forwarding.scala 57:17]
        skip @[forwarding.scala 56:14]
    
  module HazardUnitBP : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip id_prediction : UInt<1>, flip idex_memread : UInt<1>, flip idex_rd : UInt<5>, flip exmem_taken : UInt<1>, pcSel : UInt<2>, if_id_stall : UInt<1>, if_id_flush : UInt<1>, id_ex_flush : UInt<1>, ex_mem_flush : UInt<1>}
    
    io.pcSel <= UInt<1>("h00") @[hazard-bp.scala 42:19]
    io.if_id_stall <= UInt<1>("h00") @[hazard-bp.scala 43:19]
    io.id_ex_flush <= UInt<1>("h00") @[hazard-bp.scala 44:19]
    io.ex_mem_flush <= UInt<1>("h00") @[hazard-bp.scala 45:19]
    io.if_id_flush <= UInt<1>("h00") @[hazard-bp.scala 46:19]
    node _T = eq(io.exmem_taken, UInt<1>("h01")) @[hazard-bp.scala 48:24]
    when _T : @[hazard-bp.scala 48:36]
      io.pcSel <= UInt<1>("h01") @[hazard-bp.scala 50:14]
      io.if_id_flush <= UInt<1>("h01") @[hazard-bp.scala 51:21]
      io.id_ex_flush <= UInt<1>("h01") @[hazard-bp.scala 52:21]
      io.ex_mem_flush <= UInt<1>("h01") @[hazard-bp.scala 53:21]
      skip @[hazard-bp.scala 48:36]
    else : @[hazard-bp.scala 56:59]
      node _T_1 = eq(io.idex_memread, UInt<1>("h01")) @[hazard-bp.scala 55:30]
      node _T_2 = eq(io.idex_rd, io.rs1) @[hazard-bp.scala 56:21]
      node _T_3 = eq(io.idex_rd, io.rs2) @[hazard-bp.scala 56:46]
      node _T_4 = or(_T_2, _T_3) @[hazard-bp.scala 56:32]
      node _T_5 = and(_T_1, _T_4) @[hazard-bp.scala 55:41]
      when _T_5 : @[hazard-bp.scala 56:59]
        io.pcSel <= UInt<2>("h03") @[hazard-bp.scala 58:14]
        io.if_id_stall <= UInt<1>("h01") @[hazard-bp.scala 59:20]
        io.id_ex_flush <= UInt<1>("h01") @[hazard-bp.scala 60:20]
        skip @[hazard-bp.scala 56:59]
      else : @[hazard-bp.scala 62:43]
        node _T_6 = eq(io.id_prediction, UInt<1>("h01")) @[hazard-bp.scala 62:31]
        when _T_6 : @[hazard-bp.scala 62:43]
          io.pcSel <= UInt<2>("h02") @[hazard-bp.scala 64:14]
          io.if_id_flush <= UInt<1>("h01") @[hazard-bp.scala 65:20]
          skip @[hazard-bp.scala 62:43]
        else : @[hazard-bp.scala 67:14]
          io.pcSel <= UInt<1>("h00") @[hazard-bp.scala 68:21]
          io.if_id_stall <= UInt<1>("h00") @[hazard-bp.scala 69:21]
          io.id_ex_flush <= UInt<1>("h00") @[hazard-bp.scala 70:21]
          io.ex_mem_flush <= UInt<1>("h00") @[hazard-bp.scala 71:21]
          io.if_id_flush <= UInt<1>("h00") @[hazard-bp.scala 72:21]
          skip @[hazard-bp.scala 67:14]
    
  module AlwaysNotTakenPredictor : 
    input clock : Clock
    input reset : Reset
    output io : {flip pc : UInt<32>, flip update : UInt<1>, flip taken : UInt<1>, prediction : UInt<1>}
    
    wire _T : UInt<2>[32] @[branchpred.scala 37:40]
    _T[0] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[1] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[2] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[3] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[4] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[5] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[6] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[7] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[8] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[9] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[10] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[11] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[12] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[13] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[14] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[15] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[16] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[17] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[18] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[19] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[20] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[21] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[22] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[23] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[24] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[25] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[26] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[27] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[28] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[29] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[30] <= UInt<2>("h02") @[branchpred.scala 37:40]
    _T[31] <= UInt<2>("h02") @[branchpred.scala 37:40]
    reg predictionTable : UInt<2>[32], clock with : (reset => (reset, _T)) @[branchpred.scala 37:32]
    io.prediction <= UInt<1>("h00") @[branchpred.scala 60:17]
    
  module Adder_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip inputx : UInt<32>, flip inputy : UInt<32>, result : UInt<32>}
    
    node _T = add(io.inputx, io.inputy) @[helpers.scala 23:26]
    node _T_1 = tail(_T, 1) @[helpers.scala 23:26]
    io.result <= _T_1 @[helpers.scala 23:13]
    
  module StageReg : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {instruction : UInt<32>, pc : UInt<32>}, flip flush : UInt<1>, flip valid : UInt<1>, data : {instruction : UInt<32>, pc : UInt<32>}}
    
    io.data.pc is invalid @[stage-register.scala 41:6]
    io.data.instruction is invalid @[stage-register.scala 41:6]
    io.valid is invalid @[stage-register.scala 41:6]
    io.flush is invalid @[stage-register.scala 41:6]
    io.in.pc is invalid @[stage-register.scala 41:6]
    io.in.instruction is invalid @[stage-register.scala 41:6]
    wire _T : {instruction : UInt<32>, pc : UInt<32>} @[stage-register.scala 43:35]
    _T.pc <= UInt<32>("h00") @[stage-register.scala 43:35]
    _T.instruction <= UInt<32>("h00") @[stage-register.scala 43:35]
    reg reg : {instruction : UInt<32>, pc : UInt<32>}, clock with : (reset => (reset, _T)) @[stage-register.scala 43:21]
    io.data.pc <= reg.pc @[stage-register.scala 45:11]
    io.data.instruction <= reg.instruction @[stage-register.scala 45:11]
    when io.valid : @[stage-register.scala 47:19]
      reg.pc <= io.in.pc @[stage-register.scala 48:9]
      reg.instruction <= io.in.instruction @[stage-register.scala 48:9]
      skip @[stage-register.scala 47:19]
    when io.flush : @[stage-register.scala 51:19]
      wire _T_1 : {instruction : UInt<32>, pc : UInt<32>} @[stage-register.scala 52:25]
      _T_1.pc <= UInt<32>("h00") @[stage-register.scala 52:25]
      _T_1.instruction <= UInt<32>("h00") @[stage-register.scala 52:25]
      reg.pc <= _T_1.pc @[stage-register.scala 52:9]
      reg.instruction <= _T_1.instruction @[stage-register.scala 52:9]
      skip @[stage-register.scala 51:19]
    
  module StageReg_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {pc : UInt<32>, instruction : UInt<32>, sextImm : UInt<32>, readdata1 : UInt<32>, readdata2 : UInt<32>}, flip flush : UInt<1>, flip valid : UInt<1>, data : {pc : UInt<32>, instruction : UInt<32>, sextImm : UInt<32>, readdata1 : UInt<32>, readdata2 : UInt<32>}}
    
    io.data.readdata2 is invalid @[stage-register.scala 41:6]
    io.data.readdata1 is invalid @[stage-register.scala 41:6]
    io.data.sextImm is invalid @[stage-register.scala 41:6]
    io.data.instruction is invalid @[stage-register.scala 41:6]
    io.data.pc is invalid @[stage-register.scala 41:6]
    io.valid is invalid @[stage-register.scala 41:6]
    io.flush is invalid @[stage-register.scala 41:6]
    io.in.readdata2 is invalid @[stage-register.scala 41:6]
    io.in.readdata1 is invalid @[stage-register.scala 41:6]
    io.in.sextImm is invalid @[stage-register.scala 41:6]
    io.in.instruction is invalid @[stage-register.scala 41:6]
    io.in.pc is invalid @[stage-register.scala 41:6]
    wire _T : {pc : UInt<32>, instruction : UInt<32>, sextImm : UInt<32>, readdata1 : UInt<32>, readdata2 : UInt<32>} @[stage-register.scala 43:35]
    _T.readdata2 <= UInt<32>("h00") @[stage-register.scala 43:35]
    _T.readdata1 <= UInt<32>("h00") @[stage-register.scala 43:35]
    _T.sextImm <= UInt<32>("h00") @[stage-register.scala 43:35]
    _T.instruction <= UInt<32>("h00") @[stage-register.scala 43:35]
    _T.pc <= UInt<32>("h00") @[stage-register.scala 43:35]
    reg reg : {pc : UInt<32>, instruction : UInt<32>, sextImm : UInt<32>, readdata1 : UInt<32>, readdata2 : UInt<32>}, clock with : (reset => (reset, _T)) @[stage-register.scala 43:21]
    io.data.readdata2 <= reg.readdata2 @[stage-register.scala 45:11]
    io.data.readdata1 <= reg.readdata1 @[stage-register.scala 45:11]
    io.data.sextImm <= reg.sextImm @[stage-register.scala 45:11]
    io.data.instruction <= reg.instruction @[stage-register.scala 45:11]
    io.data.pc <= reg.pc @[stage-register.scala 45:11]
    when io.valid : @[stage-register.scala 47:19]
      reg.readdata2 <= io.in.readdata2 @[stage-register.scala 48:9]
      reg.readdata1 <= io.in.readdata1 @[stage-register.scala 48:9]
      reg.sextImm <= io.in.sextImm @[stage-register.scala 48:9]
      reg.instruction <= io.in.instruction @[stage-register.scala 48:9]
      reg.pc <= io.in.pc @[stage-register.scala 48:9]
      skip @[stage-register.scala 47:19]
    when io.flush : @[stage-register.scala 51:19]
      wire _T_1 : {pc : UInt<32>, instruction : UInt<32>, sextImm : UInt<32>, readdata1 : UInt<32>, readdata2 : UInt<32>} @[stage-register.scala 52:25]
      _T_1.readdata2 <= UInt<32>("h00") @[stage-register.scala 52:25]
      _T_1.readdata1 <= UInt<32>("h00") @[stage-register.scala 52:25]
      _T_1.sextImm <= UInt<32>("h00") @[stage-register.scala 52:25]
      _T_1.instruction <= UInt<32>("h00") @[stage-register.scala 52:25]
      _T_1.pc <= UInt<32>("h00") @[stage-register.scala 52:25]
      reg.readdata2 <= _T_1.readdata2 @[stage-register.scala 52:9]
      reg.readdata1 <= _T_1.readdata1 @[stage-register.scala 52:9]
      reg.sextImm <= _T_1.sextImm @[stage-register.scala 52:9]
      reg.instruction <= _T_1.instruction @[stage-register.scala 52:9]
      reg.pc <= _T_1.pc @[stage-register.scala 52:9]
      skip @[stage-register.scala 51:19]
    
  module StageReg_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {ex_ctrl : {itype : UInt<1>, aluop : UInt<1>, resultselect : UInt<1>, xsrc : UInt<1>, ysrc : UInt<1>, plus4 : UInt<1>, branch : UInt<1>, jal : UInt<1>, jalr : UInt<1>, prediction : UInt<1>}, mem_ctrl : {memop : UInt<2>}, wb_ctrl : {toreg : UInt<1>, regwrite : UInt<1>}}, flip flush : UInt<1>, flip valid : UInt<1>, data : {ex_ctrl : {itype : UInt<1>, aluop : UInt<1>, resultselect : UInt<1>, xsrc : UInt<1>, ysrc : UInt<1>, plus4 : UInt<1>, branch : UInt<1>, jal : UInt<1>, jalr : UInt<1>, prediction : UInt<1>}, mem_ctrl : {memop : UInt<2>}, wb_ctrl : {toreg : UInt<1>, regwrite : UInt<1>}}}
    
    io.data.wb_ctrl.regwrite is invalid @[stage-register.scala 41:6]
    io.data.wb_ctrl.toreg is invalid @[stage-register.scala 41:6]
    io.data.mem_ctrl.memop is invalid @[stage-register.scala 41:6]
    io.data.ex_ctrl.prediction is invalid @[stage-register.scala 41:6]
    io.data.ex_ctrl.jalr is invalid @[stage-register.scala 41:6]
    io.data.ex_ctrl.jal is invalid @[stage-register.scala 41:6]
    io.data.ex_ctrl.branch is invalid @[stage-register.scala 41:6]
    io.data.ex_ctrl.plus4 is invalid @[stage-register.scala 41:6]
    io.data.ex_ctrl.ysrc is invalid @[stage-register.scala 41:6]
    io.data.ex_ctrl.xsrc is invalid @[stage-register.scala 41:6]
    io.data.ex_ctrl.resultselect is invalid @[stage-register.scala 41:6]
    io.data.ex_ctrl.aluop is invalid @[stage-register.scala 41:6]
    io.data.ex_ctrl.itype is invalid @[stage-register.scala 41:6]
    io.valid is invalid @[stage-register.scala 41:6]
    io.flush is invalid @[stage-register.scala 41:6]
    io.in.wb_ctrl.regwrite is invalid @[stage-register.scala 41:6]
    io.in.wb_ctrl.toreg is invalid @[stage-register.scala 41:6]
    io.in.mem_ctrl.memop is invalid @[stage-register.scala 41:6]
    io.in.ex_ctrl.prediction is invalid @[stage-register.scala 41:6]
    io.in.ex_ctrl.jalr is invalid @[stage-register.scala 41:6]
    io.in.ex_ctrl.jal is invalid @[stage-register.scala 41:6]
    io.in.ex_ctrl.branch is invalid @[stage-register.scala 41:6]
    io.in.ex_ctrl.plus4 is invalid @[stage-register.scala 41:6]
    io.in.ex_ctrl.ysrc is invalid @[stage-register.scala 41:6]
    io.in.ex_ctrl.xsrc is invalid @[stage-register.scala 41:6]
    io.in.ex_ctrl.resultselect is invalid @[stage-register.scala 41:6]
    io.in.ex_ctrl.aluop is invalid @[stage-register.scala 41:6]
    io.in.ex_ctrl.itype is invalid @[stage-register.scala 41:6]
    wire _T : {ex_ctrl : {itype : UInt<1>, aluop : UInt<1>, resultselect : UInt<1>, xsrc : UInt<1>, ysrc : UInt<1>, plus4 : UInt<1>, branch : UInt<1>, jal : UInt<1>, jalr : UInt<1>, prediction : UInt<1>}, mem_ctrl : {memop : UInt<2>}, wb_ctrl : {toreg : UInt<1>, regwrite : UInt<1>}} @[stage-register.scala 43:35]
    _T.wb_ctrl.regwrite <= UInt<1>("h00") @[stage-register.scala 43:35]
    _T.wb_ctrl.toreg <= UInt<1>("h00") @[stage-register.scala 43:35]
    _T.mem_ctrl.memop <= UInt<2>("h00") @[stage-register.scala 43:35]
    _T.ex_ctrl.prediction <= UInt<1>("h00") @[stage-register.scala 43:35]
    _T.ex_ctrl.jalr <= UInt<1>("h00") @[stage-register.scala 43:35]
    _T.ex_ctrl.jal <= UInt<1>("h00") @[stage-register.scala 43:35]
    _T.ex_ctrl.branch <= UInt<1>("h00") @[stage-register.scala 43:35]
    _T.ex_ctrl.plus4 <= UInt<1>("h00") @[stage-register.scala 43:35]
    _T.ex_ctrl.ysrc <= UInt<1>("h00") @[stage-register.scala 43:35]
    _T.ex_ctrl.xsrc <= UInt<1>("h00") @[stage-register.scala 43:35]
    _T.ex_ctrl.resultselect <= UInt<1>("h00") @[stage-register.scala 43:35]
    _T.ex_ctrl.aluop <= UInt<1>("h00") @[stage-register.scala 43:35]
    _T.ex_ctrl.itype <= UInt<1>("h00") @[stage-register.scala 43:35]
    reg reg : {ex_ctrl : {itype : UInt<1>, aluop : UInt<1>, resultselect : UInt<1>, xsrc : UInt<1>, ysrc : UInt<1>, plus4 : UInt<1>, branch : UInt<1>, jal : UInt<1>, jalr : UInt<1>, prediction : UInt<1>}, mem_ctrl : {memop : UInt<2>}, wb_ctrl : {toreg : UInt<1>, regwrite : UInt<1>}}, clock with : (reset => (reset, _T)) @[stage-register.scala 43:21]
    io.data.wb_ctrl.regwrite <= reg.wb_ctrl.regwrite @[stage-register.scala 45:11]
    io.data.wb_ctrl.toreg <= reg.wb_ctrl.toreg @[stage-register.scala 45:11]
    io.data.mem_ctrl.memop <= reg.mem_ctrl.memop @[stage-register.scala 45:11]
    io.data.ex_ctrl.prediction <= reg.ex_ctrl.prediction @[stage-register.scala 45:11]
    io.data.ex_ctrl.jalr <= reg.ex_ctrl.jalr @[stage-register.scala 45:11]
    io.data.ex_ctrl.jal <= reg.ex_ctrl.jal @[stage-register.scala 45:11]
    io.data.ex_ctrl.branch <= reg.ex_ctrl.branch @[stage-register.scala 45:11]
    io.data.ex_ctrl.plus4 <= reg.ex_ctrl.plus4 @[stage-register.scala 45:11]
    io.data.ex_ctrl.ysrc <= reg.ex_ctrl.ysrc @[stage-register.scala 45:11]
    io.data.ex_ctrl.xsrc <= reg.ex_ctrl.xsrc @[stage-register.scala 45:11]
    io.data.ex_ctrl.resultselect <= reg.ex_ctrl.resultselect @[stage-register.scala 45:11]
    io.data.ex_ctrl.aluop <= reg.ex_ctrl.aluop @[stage-register.scala 45:11]
    io.data.ex_ctrl.itype <= reg.ex_ctrl.itype @[stage-register.scala 45:11]
    when io.valid : @[stage-register.scala 47:19]
      reg.wb_ctrl.regwrite <= io.in.wb_ctrl.regwrite @[stage-register.scala 48:9]
      reg.wb_ctrl.toreg <= io.in.wb_ctrl.toreg @[stage-register.scala 48:9]
      reg.mem_ctrl.memop <= io.in.mem_ctrl.memop @[stage-register.scala 48:9]
      reg.ex_ctrl.prediction <= io.in.ex_ctrl.prediction @[stage-register.scala 48:9]
      reg.ex_ctrl.jalr <= io.in.ex_ctrl.jalr @[stage-register.scala 48:9]
      reg.ex_ctrl.jal <= io.in.ex_ctrl.jal @[stage-register.scala 48:9]
      reg.ex_ctrl.branch <= io.in.ex_ctrl.branch @[stage-register.scala 48:9]
      reg.ex_ctrl.plus4 <= io.in.ex_ctrl.plus4 @[stage-register.scala 48:9]
      reg.ex_ctrl.ysrc <= io.in.ex_ctrl.ysrc @[stage-register.scala 48:9]
      reg.ex_ctrl.xsrc <= io.in.ex_ctrl.xsrc @[stage-register.scala 48:9]
      reg.ex_ctrl.resultselect <= io.in.ex_ctrl.resultselect @[stage-register.scala 48:9]
      reg.ex_ctrl.aluop <= io.in.ex_ctrl.aluop @[stage-register.scala 48:9]
      reg.ex_ctrl.itype <= io.in.ex_ctrl.itype @[stage-register.scala 48:9]
      skip @[stage-register.scala 47:19]
    when io.flush : @[stage-register.scala 51:19]
      wire _T_1 : {ex_ctrl : {itype : UInt<1>, aluop : UInt<1>, resultselect : UInt<1>, xsrc : UInt<1>, ysrc : UInt<1>, plus4 : UInt<1>, branch : UInt<1>, jal : UInt<1>, jalr : UInt<1>, prediction : UInt<1>}, mem_ctrl : {memop : UInt<2>}, wb_ctrl : {toreg : UInt<1>, regwrite : UInt<1>}} @[stage-register.scala 52:25]
      _T_1.wb_ctrl.regwrite <= UInt<1>("h00") @[stage-register.scala 52:25]
      _T_1.wb_ctrl.toreg <= UInt<1>("h00") @[stage-register.scala 52:25]
      _T_1.mem_ctrl.memop <= UInt<2>("h00") @[stage-register.scala 52:25]
      _T_1.ex_ctrl.prediction <= UInt<1>("h00") @[stage-register.scala 52:25]
      _T_1.ex_ctrl.jalr <= UInt<1>("h00") @[stage-register.scala 52:25]
      _T_1.ex_ctrl.jal <= UInt<1>("h00") @[stage-register.scala 52:25]
      _T_1.ex_ctrl.branch <= UInt<1>("h00") @[stage-register.scala 52:25]
      _T_1.ex_ctrl.plus4 <= UInt<1>("h00") @[stage-register.scala 52:25]
      _T_1.ex_ctrl.ysrc <= UInt<1>("h00") @[stage-register.scala 52:25]
      _T_1.ex_ctrl.xsrc <= UInt<1>("h00") @[stage-register.scala 52:25]
      _T_1.ex_ctrl.resultselect <= UInt<1>("h00") @[stage-register.scala 52:25]
      _T_1.ex_ctrl.aluop <= UInt<1>("h00") @[stage-register.scala 52:25]
      _T_1.ex_ctrl.itype <= UInt<1>("h00") @[stage-register.scala 52:25]
      reg.wb_ctrl.regwrite <= _T_1.wb_ctrl.regwrite @[stage-register.scala 52:9]
      reg.wb_ctrl.toreg <= _T_1.wb_ctrl.toreg @[stage-register.scala 52:9]
      reg.mem_ctrl.memop <= _T_1.mem_ctrl.memop @[stage-register.scala 52:9]
      reg.ex_ctrl.prediction <= _T_1.ex_ctrl.prediction @[stage-register.scala 52:9]
      reg.ex_ctrl.jalr <= _T_1.ex_ctrl.jalr @[stage-register.scala 52:9]
      reg.ex_ctrl.jal <= _T_1.ex_ctrl.jal @[stage-register.scala 52:9]
      reg.ex_ctrl.branch <= _T_1.ex_ctrl.branch @[stage-register.scala 52:9]
      reg.ex_ctrl.plus4 <= _T_1.ex_ctrl.plus4 @[stage-register.scala 52:9]
      reg.ex_ctrl.ysrc <= _T_1.ex_ctrl.ysrc @[stage-register.scala 52:9]
      reg.ex_ctrl.xsrc <= _T_1.ex_ctrl.xsrc @[stage-register.scala 52:9]
      reg.ex_ctrl.resultselect <= _T_1.ex_ctrl.resultselect @[stage-register.scala 52:9]
      reg.ex_ctrl.aluop <= _T_1.ex_ctrl.aluop @[stage-register.scala 52:9]
      reg.ex_ctrl.itype <= _T_1.ex_ctrl.itype @[stage-register.scala 52:9]
      skip @[stage-register.scala 51:19]
    
  module StageReg_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {ex_result : UInt<32>, mem_writedata : UInt<32>, instruction : UInt<32>, next_pc : UInt<32>, taken : UInt<1>}, flip flush : UInt<1>, flip valid : UInt<1>, data : {ex_result : UInt<32>, mem_writedata : UInt<32>, instruction : UInt<32>, next_pc : UInt<32>, taken : UInt<1>}}
    
    io.data.taken is invalid @[stage-register.scala 41:6]
    io.data.next_pc is invalid @[stage-register.scala 41:6]
    io.data.instruction is invalid @[stage-register.scala 41:6]
    io.data.mem_writedata is invalid @[stage-register.scala 41:6]
    io.data.ex_result is invalid @[stage-register.scala 41:6]
    io.valid is invalid @[stage-register.scala 41:6]
    io.flush is invalid @[stage-register.scala 41:6]
    io.in.taken is invalid @[stage-register.scala 41:6]
    io.in.next_pc is invalid @[stage-register.scala 41:6]
    io.in.instruction is invalid @[stage-register.scala 41:6]
    io.in.mem_writedata is invalid @[stage-register.scala 41:6]
    io.in.ex_result is invalid @[stage-register.scala 41:6]
    wire _T : {ex_result : UInt<32>, mem_writedata : UInt<32>, instruction : UInt<32>, next_pc : UInt<32>, taken : UInt<1>} @[stage-register.scala 43:35]
    _T.taken <= UInt<1>("h00") @[stage-register.scala 43:35]
    _T.next_pc <= UInt<32>("h00") @[stage-register.scala 43:35]
    _T.instruction <= UInt<32>("h00") @[stage-register.scala 43:35]
    _T.mem_writedata <= UInt<32>("h00") @[stage-register.scala 43:35]
    _T.ex_result <= UInt<32>("h00") @[stage-register.scala 43:35]
    reg reg : {ex_result : UInt<32>, mem_writedata : UInt<32>, instruction : UInt<32>, next_pc : UInt<32>, taken : UInt<1>}, clock with : (reset => (reset, _T)) @[stage-register.scala 43:21]
    io.data.taken <= reg.taken @[stage-register.scala 45:11]
    io.data.next_pc <= reg.next_pc @[stage-register.scala 45:11]
    io.data.instruction <= reg.instruction @[stage-register.scala 45:11]
    io.data.mem_writedata <= reg.mem_writedata @[stage-register.scala 45:11]
    io.data.ex_result <= reg.ex_result @[stage-register.scala 45:11]
    when io.valid : @[stage-register.scala 47:19]
      reg.taken <= io.in.taken @[stage-register.scala 48:9]
      reg.next_pc <= io.in.next_pc @[stage-register.scala 48:9]
      reg.instruction <= io.in.instruction @[stage-register.scala 48:9]
      reg.mem_writedata <= io.in.mem_writedata @[stage-register.scala 48:9]
      reg.ex_result <= io.in.ex_result @[stage-register.scala 48:9]
      skip @[stage-register.scala 47:19]
    when io.flush : @[stage-register.scala 51:19]
      wire _T_1 : {ex_result : UInt<32>, mem_writedata : UInt<32>, instruction : UInt<32>, next_pc : UInt<32>, taken : UInt<1>} @[stage-register.scala 52:25]
      _T_1.taken <= UInt<1>("h00") @[stage-register.scala 52:25]
      _T_1.next_pc <= UInt<32>("h00") @[stage-register.scala 52:25]
      _T_1.instruction <= UInt<32>("h00") @[stage-register.scala 52:25]
      _T_1.mem_writedata <= UInt<32>("h00") @[stage-register.scala 52:25]
      _T_1.ex_result <= UInt<32>("h00") @[stage-register.scala 52:25]
      reg.taken <= _T_1.taken @[stage-register.scala 52:9]
      reg.next_pc <= _T_1.next_pc @[stage-register.scala 52:9]
      reg.instruction <= _T_1.instruction @[stage-register.scala 52:9]
      reg.mem_writedata <= _T_1.mem_writedata @[stage-register.scala 52:9]
      reg.ex_result <= _T_1.ex_result @[stage-register.scala 52:9]
      skip @[stage-register.scala 51:19]
    
  module StageReg_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {mem_ctrl : {memop : UInt<2>}, wb_ctrl : {toreg : UInt<1>, regwrite : UInt<1>}}, flip flush : UInt<1>, flip valid : UInt<1>, data : {mem_ctrl : {memop : UInt<2>}, wb_ctrl : {toreg : UInt<1>, regwrite : UInt<1>}}}
    
    io.data.wb_ctrl.regwrite is invalid @[stage-register.scala 41:6]
    io.data.wb_ctrl.toreg is invalid @[stage-register.scala 41:6]
    io.data.mem_ctrl.memop is invalid @[stage-register.scala 41:6]
    io.valid is invalid @[stage-register.scala 41:6]
    io.flush is invalid @[stage-register.scala 41:6]
    io.in.wb_ctrl.regwrite is invalid @[stage-register.scala 41:6]
    io.in.wb_ctrl.toreg is invalid @[stage-register.scala 41:6]
    io.in.mem_ctrl.memop is invalid @[stage-register.scala 41:6]
    wire _T : {mem_ctrl : {memop : UInt<2>}, wb_ctrl : {toreg : UInt<1>, regwrite : UInt<1>}} @[stage-register.scala 43:35]
    _T.wb_ctrl.regwrite <= UInt<1>("h00") @[stage-register.scala 43:35]
    _T.wb_ctrl.toreg <= UInt<1>("h00") @[stage-register.scala 43:35]
    _T.mem_ctrl.memop <= UInt<2>("h00") @[stage-register.scala 43:35]
    reg reg : {mem_ctrl : {memop : UInt<2>}, wb_ctrl : {toreg : UInt<1>, regwrite : UInt<1>}}, clock with : (reset => (reset, _T)) @[stage-register.scala 43:21]
    io.data.wb_ctrl.regwrite <= reg.wb_ctrl.regwrite @[stage-register.scala 45:11]
    io.data.wb_ctrl.toreg <= reg.wb_ctrl.toreg @[stage-register.scala 45:11]
    io.data.mem_ctrl.memop <= reg.mem_ctrl.memop @[stage-register.scala 45:11]
    when io.valid : @[stage-register.scala 47:19]
      reg.wb_ctrl.regwrite <= io.in.wb_ctrl.regwrite @[stage-register.scala 48:9]
      reg.wb_ctrl.toreg <= io.in.wb_ctrl.toreg @[stage-register.scala 48:9]
      reg.mem_ctrl.memop <= io.in.mem_ctrl.memop @[stage-register.scala 48:9]
      skip @[stage-register.scala 47:19]
    when io.flush : @[stage-register.scala 51:19]
      wire _T_1 : {mem_ctrl : {memop : UInt<2>}, wb_ctrl : {toreg : UInt<1>, regwrite : UInt<1>}} @[stage-register.scala 52:25]
      _T_1.wb_ctrl.regwrite <= UInt<1>("h00") @[stage-register.scala 52:25]
      _T_1.wb_ctrl.toreg <= UInt<1>("h00") @[stage-register.scala 52:25]
      _T_1.mem_ctrl.memop <= UInt<2>("h00") @[stage-register.scala 52:25]
      reg.wb_ctrl.regwrite <= _T_1.wb_ctrl.regwrite @[stage-register.scala 52:9]
      reg.wb_ctrl.toreg <= _T_1.wb_ctrl.toreg @[stage-register.scala 52:9]
      reg.mem_ctrl.memop <= _T_1.mem_ctrl.memop @[stage-register.scala 52:9]
      skip @[stage-register.scala 51:19]
    
  module StageReg_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {instruction : UInt<32>, readdata : UInt<32>, ex_result : UInt<32>}, flip flush : UInt<1>, flip valid : UInt<1>, data : {instruction : UInt<32>, readdata : UInt<32>, ex_result : UInt<32>}}
    
    io.data.ex_result is invalid @[stage-register.scala 41:6]
    io.data.readdata is invalid @[stage-register.scala 41:6]
    io.data.instruction is invalid @[stage-register.scala 41:6]
    io.valid is invalid @[stage-register.scala 41:6]
    io.flush is invalid @[stage-register.scala 41:6]
    io.in.ex_result is invalid @[stage-register.scala 41:6]
    io.in.readdata is invalid @[stage-register.scala 41:6]
    io.in.instruction is invalid @[stage-register.scala 41:6]
    wire _T : {instruction : UInt<32>, readdata : UInt<32>, ex_result : UInt<32>} @[stage-register.scala 43:35]
    _T.ex_result <= UInt<32>("h00") @[stage-register.scala 43:35]
    _T.readdata <= UInt<32>("h00") @[stage-register.scala 43:35]
    _T.instruction <= UInt<32>("h00") @[stage-register.scala 43:35]
    reg reg : {instruction : UInt<32>, readdata : UInt<32>, ex_result : UInt<32>}, clock with : (reset => (reset, _T)) @[stage-register.scala 43:21]
    io.data.ex_result <= reg.ex_result @[stage-register.scala 45:11]
    io.data.readdata <= reg.readdata @[stage-register.scala 45:11]
    io.data.instruction <= reg.instruction @[stage-register.scala 45:11]
    when io.valid : @[stage-register.scala 47:19]
      reg.ex_result <= io.in.ex_result @[stage-register.scala 48:9]
      reg.readdata <= io.in.readdata @[stage-register.scala 48:9]
      reg.instruction <= io.in.instruction @[stage-register.scala 48:9]
      skip @[stage-register.scala 47:19]
    when io.flush : @[stage-register.scala 51:19]
      wire _T_1 : {instruction : UInt<32>, readdata : UInt<32>, ex_result : UInt<32>} @[stage-register.scala 52:25]
      _T_1.ex_result <= UInt<32>("h00") @[stage-register.scala 52:25]
      _T_1.readdata <= UInt<32>("h00") @[stage-register.scala 52:25]
      _T_1.instruction <= UInt<32>("h00") @[stage-register.scala 52:25]
      reg.ex_result <= _T_1.ex_result @[stage-register.scala 52:9]
      reg.readdata <= _T_1.readdata @[stage-register.scala 52:9]
      reg.instruction <= _T_1.instruction @[stage-register.scala 52:9]
      skip @[stage-register.scala 51:19]
    
  module StageReg_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {wb_ctrl : {toreg : UInt<1>, regwrite : UInt<1>}}, flip flush : UInt<1>, flip valid : UInt<1>, data : {wb_ctrl : {toreg : UInt<1>, regwrite : UInt<1>}}}
    
    io.data.wb_ctrl.regwrite is invalid @[stage-register.scala 41:6]
    io.data.wb_ctrl.toreg is invalid @[stage-register.scala 41:6]
    io.valid is invalid @[stage-register.scala 41:6]
    io.flush is invalid @[stage-register.scala 41:6]
    io.in.wb_ctrl.regwrite is invalid @[stage-register.scala 41:6]
    io.in.wb_ctrl.toreg is invalid @[stage-register.scala 41:6]
    wire _T : {wb_ctrl : {toreg : UInt<1>, regwrite : UInt<1>}} @[stage-register.scala 43:35]
    _T.wb_ctrl.regwrite <= UInt<1>("h00") @[stage-register.scala 43:35]
    _T.wb_ctrl.toreg <= UInt<1>("h00") @[stage-register.scala 43:35]
    reg reg : {wb_ctrl : {toreg : UInt<1>, regwrite : UInt<1>}}, clock with : (reset => (reset, _T)) @[stage-register.scala 43:21]
    io.data.wb_ctrl.regwrite <= reg.wb_ctrl.regwrite @[stage-register.scala 45:11]
    io.data.wb_ctrl.toreg <= reg.wb_ctrl.toreg @[stage-register.scala 45:11]
    when io.valid : @[stage-register.scala 47:19]
      reg.wb_ctrl.regwrite <= io.in.wb_ctrl.regwrite @[stage-register.scala 48:9]
      reg.wb_ctrl.toreg <= io.in.wb_ctrl.toreg @[stage-register.scala 48:9]
      skip @[stage-register.scala 47:19]
    when io.flush : @[stage-register.scala 51:19]
      wire _T_1 : {wb_ctrl : {toreg : UInt<1>, regwrite : UInt<1>}} @[stage-register.scala 52:25]
      _T_1.wb_ctrl.regwrite <= UInt<1>("h00") @[stage-register.scala 52:25]
      _T_1.wb_ctrl.toreg <= UInt<1>("h00") @[stage-register.scala 52:25]
      reg.wb_ctrl.regwrite <= _T_1.wb_ctrl.regwrite @[stage-register.scala 52:9]
      reg.wb_ctrl.toreg <= _T_1.wb_ctrl.toreg @[stage-register.scala 52:9]
      skip @[stage-register.scala 51:19]
    
  module PipelinedCPUBP : 
    input clock : Clock
    input reset : Reset
    output io : {flip imem : {flip address : UInt<32>, flip valid : UInt<1>, good : UInt<1>, instruction : UInt<32>, ready : UInt<1>}, flip dmem : {flip address : UInt<32>, flip valid : UInt<1>, good : UInt<1>, flip writedata : UInt<32>, flip memread : UInt<1>, flip memwrite : UInt<1>, flip maskmode : UInt<2>, flip sext : UInt<1>, readdata : UInt<32>}}
    
    reg pc : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[cpu-bp.scala 92:32]
    inst control of Control @[cpu-bp.scala 93:31]
    control.clock <= clock
    control.reset <= reset
    inst registers of RegisterFile @[cpu-bp.scala 94:31]
    registers.clock <= clock
    registers.reset <= reset
    inst aluControl of ALUControl @[cpu-bp.scala 95:31]
    aluControl.clock <= clock
    aluControl.reset <= reset
    inst alu of ALU @[cpu-bp.scala 96:31]
    alu.clock <= clock
    alu.reset <= reset
    inst immGen of ImmediateGenerator @[cpu-bp.scala 97:31]
    immGen.clock <= clock
    immGen.reset <= reset
    inst pcPlusFour of Adder @[cpu-bp.scala 98:31]
    pcPlusFour.clock <= clock
    pcPlusFour.reset <= reset
    inst nextPCmod of NextPC @[cpu-bp.scala 99:31]
    nextPCmod.clock <= clock
    nextPCmod.reset <= reset
    inst forwarding of ForwardingUnit @[cpu-bp.scala 100:31]
    forwarding.clock <= clock
    forwarding.reset <= reset
    inst hazard of HazardUnitBP @[cpu-bp.scala 101:31]
    hazard.clock <= clock
    hazard.reset <= reset
    inst predictor of AlwaysNotTakenPredictor @[cpu-bp.scala 102:31]
    predictor.clock <= clock
    predictor.reset <= reset
    inst branchAdd of Adder_1 @[cpu-bp.scala 103:31]
    branchAdd.clock <= clock
    branchAdd.reset <= reset
    reg value : UInt<30>, clock with : (reset => (reset, UInt<30>("h00"))) @[Counter.scala 29:33]
    wire _T : UInt<1>
    _T <= UInt<1>("h00")
    when UInt<1>("h01") : @[Counter.scala 67:17]
      node _T_1 = eq(value, UInt<30>("h03fffffff")) @[Counter.scala 38:24]
      node _T_2 = add(value, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_3 = tail(_T_2, 1) @[Counter.scala 39:22]
      value <= _T_3 @[Counter.scala 39:13]
      _T <= _T_1 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    inst if_id of StageReg @[cpu-bp.scala 107:27]
    if_id.clock <= clock
    if_id.reset <= reset
    inst id_ex of StageReg_1 @[cpu-bp.scala 109:27]
    id_ex.clock <= clock
    id_ex.reset <= reset
    inst id_ex_ctrl of StageReg_2 @[cpu-bp.scala 110:27]
    id_ex_ctrl.clock <= clock
    id_ex_ctrl.reset <= reset
    inst ex_mem of StageReg_3 @[cpu-bp.scala 112:27]
    ex_mem.clock <= clock
    ex_mem.reset <= reset
    inst ex_mem_ctrl of StageReg_4 @[cpu-bp.scala 113:27]
    ex_mem_ctrl.clock <= clock
    ex_mem_ctrl.reset <= reset
    inst mem_wb of StageReg_5 @[cpu-bp.scala 115:27]
    mem_wb.clock <= clock
    mem_wb.reset <= reset
    inst mem_wb_ctrl of StageReg_6 @[cpu-bp.scala 119:27]
    mem_wb_ctrl.clock <= clock
    mem_wb_ctrl.reset <= reset
    reg bpCorrect : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[cpu-bp.scala 121:28]
    reg bpIncorrect : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[cpu-bp.scala 122:28]
    node _T_4 = shl(UInt<1>("h01"), 20) @[cpu-bp.scala 123:26]
    node _T_5 = gt(bpCorrect, _T_4) @[cpu-bp.scala 123:19]
    when _T_5 : @[cpu-bp.scala 123:34]
      node _T_6 = asUInt(reset) @[cpu-bp.scala 125:11]
      node _T_7 = eq(_T_6, UInt<1>("h00")) @[cpu-bp.scala 125:11]
      when _T_7 : @[cpu-bp.scala 125:11]
        printf(clock, UInt<1>(1), "BP correct: %d; incorrect: %d\n", bpCorrect, bpIncorrect) @[cpu-bp.scala 125:11]
        skip @[cpu-bp.scala 125:11]
      skip @[cpu-bp.scala 123:34]
    wire next_pc : UInt<32> @[cpu-bp.scala 148:24]
    wire id_next_pc : UInt @[cpu-bp.scala 149:24]
    wire write_data : UInt @[cpu-bp.scala 150:24]
    node _T_8 = eq(hazard.io.pcSel, UInt<1>("h00")) @[cpu-bp.scala 159:30]
    node _T_9 = eq(hazard.io.pcSel, UInt<1>("h01")) @[cpu-bp.scala 160:30]
    node _T_10 = eq(hazard.io.pcSel, UInt<2>("h02")) @[cpu-bp.scala 161:30]
    node _T_11 = eq(hazard.io.pcSel, UInt<2>("h03")) @[cpu-bp.scala 162:30]
    node _T_12 = mux(_T_11, pc, UInt<1>("h00")) @[Mux.scala 87:16]
    node _T_13 = mux(_T_10, id_next_pc, _T_12) @[Mux.scala 87:16]
    node _T_14 = mux(_T_9, next_pc, _T_13) @[Mux.scala 87:16]
    node _T_15 = mux(_T_8, pcPlusFour.io.result, _T_14) @[Mux.scala 87:16]
    pc <= _T_15 @[cpu-bp.scala 158:6]
    io.imem.address <= pc @[cpu-bp.scala 164:19]
    io.imem.valid <= UInt<1>("h01") @[cpu-bp.scala 165:19]
    pcPlusFour.io.inputx <= pc @[cpu-bp.scala 168:24]
    pcPlusFour.io.inputy <= UInt<3>("h04") @[cpu-bp.scala 169:24]
    if_id.io.in.instruction <= io.imem.instruction @[cpu-bp.scala 172:27]
    if_id.io.in.pc <= pc @[cpu-bp.scala 173:27]
    node _T_16 = eq(hazard.io.if_id_stall, UInt<1>("h00")) @[cpu-bp.scala 176:21]
    if_id.io.valid <= _T_16 @[cpu-bp.scala 176:18]
    if_id.io.flush <= hazard.io.if_id_flush @[cpu-bp.scala 177:18]
    node _T_17 = bits(if_id.io.data.instruction, 6, 0) @[cpu-bp.scala 184:49]
    control.io.opcode <= _T_17 @[cpu-bp.scala 184:21]
    node rs1 = bits(if_id.io.data.instruction, 19, 15) @[cpu-bp.scala 187:38]
    node rs2 = bits(if_id.io.data.instruction, 24, 20) @[cpu-bp.scala 188:38]
    hazard.io.rs1 <= rs1 @[cpu-bp.scala 191:17]
    hazard.io.rs2 <= rs2 @[cpu-bp.scala 192:17]
    registers.io.readreg1 <= rs1 @[cpu-bp.scala 195:25]
    registers.io.readreg2 <= rs2 @[cpu-bp.scala 196:25]
    registers.io.writedata <= write_data @[cpu-bp.scala 197:26]
    immGen.io.instruction <= if_id.io.data.instruction @[cpu-bp.scala 200:25]
    branchAdd.io.inputx <= if_id.io.data.pc @[cpu-bp.scala 203:23]
    branchAdd.io.inputy <= immGen.io.sextImm @[cpu-bp.scala 204:23]
    id_next_pc <= branchAdd.io.result @[cpu-bp.scala 206:14]
    predictor.io.pc <= if_id.io.data.pc @[cpu-bp.scala 209:19]
    node _T_18 = and(control.io.branch, predictor.io.prediction) @[cpu-bp.scala 213:48]
    hazard.io.id_prediction <= _T_18 @[cpu-bp.scala 213:27]
    id_ex.io.in.pc <= if_id.io.data.pc @[cpu-bp.scala 218:27]
    id_ex.io.in.sextImm <= immGen.io.sextImm @[cpu-bp.scala 219:27]
    id_ex.io.in.instruction <= if_id.io.data.instruction @[cpu-bp.scala 220:27]
    id_ex.io.in.readdata1 <= registers.io.readdata1 @[cpu-bp.scala 221:27]
    id_ex.io.in.readdata2 <= registers.io.readdata2 @[cpu-bp.scala 222:27]
    id_ex_ctrl.io.in.ex_ctrl.aluop <= control.io.aluop @[cpu-bp.scala 225:41]
    id_ex_ctrl.io.in.ex_ctrl.itype <= control.io.itype @[cpu-bp.scala 226:41]
    id_ex_ctrl.io.in.ex_ctrl.resultselect <= control.io.resultselect @[cpu-bp.scala 227:41]
    id_ex_ctrl.io.in.ex_ctrl.xsrc <= control.io.xsrc @[cpu-bp.scala 228:41]
    id_ex_ctrl.io.in.ex_ctrl.ysrc <= control.io.ysrc @[cpu-bp.scala 229:41]
    id_ex_ctrl.io.in.ex_ctrl.plus4 <= control.io.plus4 @[cpu-bp.scala 230:41]
    id_ex_ctrl.io.in.ex_ctrl.branch <= control.io.branch @[cpu-bp.scala 231:41]
    id_ex_ctrl.io.in.ex_ctrl.jal <= control.io.jal @[cpu-bp.scala 232:41]
    id_ex_ctrl.io.in.ex_ctrl.jalr <= control.io.jalr @[cpu-bp.scala 233:41]
    id_ex_ctrl.io.in.ex_ctrl.prediction <= predictor.io.prediction @[cpu-bp.scala 234:41]
    id_ex_ctrl.io.in.mem_ctrl.memop <= control.io.memop @[cpu-bp.scala 237:35]
    id_ex_ctrl.io.in.wb_ctrl.regwrite <= control.io.regwrite @[cpu-bp.scala 240:37]
    id_ex_ctrl.io.in.wb_ctrl.toreg <= control.io.toreg @[cpu-bp.scala 241:37]
    id_ex.io.valid <= UInt<1>("h01") @[cpu-bp.scala 243:18]
    id_ex.io.flush <= hazard.io.id_ex_flush @[cpu-bp.scala 244:18]
    id_ex_ctrl.io.valid <= UInt<1>("h01") @[cpu-bp.scala 246:23]
    id_ex_ctrl.io.flush <= hazard.io.id_ex_flush @[cpu-bp.scala 247:23]
    node _T_19 = bits(id_ex.io.data.instruction, 11, 7) @[cpu-bp.scala 254:49]
    hazard.io.idex_rd <= _T_19 @[cpu-bp.scala 254:21]
    node _T_20 = eq(id_ex_ctrl.io.data.mem_ctrl.memop, UInt<2>("h02")) @[cpu-bp.scala 256:43]
    when _T_20 : @[cpu-bp.scala 256:52]
      hazard.io.idex_memread <= UInt<1>("h01") @[cpu-bp.scala 257:28]
      skip @[cpu-bp.scala 256:52]
    else : @[cpu-bp.scala 258:16]
      hazard.io.idex_memread <= UInt<1>("h00") @[cpu-bp.scala 259:28]
      skip @[cpu-bp.scala 258:16]
    node _T_21 = bits(id_ex.io.data.instruction, 19, 15) @[cpu-bp.scala 263:53]
    forwarding.io.rs1 <= _T_21 @[cpu-bp.scala 263:25]
    node _T_22 = bits(id_ex.io.data.instruction, 24, 20) @[cpu-bp.scala 264:53]
    forwarding.io.rs2 <= _T_22 @[cpu-bp.scala 264:25]
    node _T_23 = bits(ex_mem.io.data.instruction, 11, 7) @[cpu-bp.scala 265:54]
    forwarding.io.exmemrd <= _T_23 @[cpu-bp.scala 265:25]
    forwarding.io.exmemrw <= ex_mem_ctrl.io.data.wb_ctrl.regwrite @[cpu-bp.scala 266:25]
    aluControl.io.itype <= id_ex_ctrl.io.data.ex_ctrl.itype @[cpu-bp.scala 269:24]
    aluControl.io.aluop <= id_ex_ctrl.io.data.ex_ctrl.aluop @[cpu-bp.scala 270:24]
    node _T_24 = bits(id_ex.io.data.instruction, 14, 12) @[cpu-bp.scala 271:52]
    aluControl.io.funct3 <= _T_24 @[cpu-bp.scala 271:24]
    node _T_25 = bits(id_ex.io.data.instruction, 31, 25) @[cpu-bp.scala 272:52]
    aluControl.io.funct7 <= _T_25 @[cpu-bp.scala 272:24]
    nextPCmod.io.branch <= id_ex_ctrl.io.data.ex_ctrl.branch @[cpu-bp.scala 275:23]
    nextPCmod.io.jal <= id_ex_ctrl.io.data.ex_ctrl.jal @[cpu-bp.scala 276:23]
    nextPCmod.io.jalr <= id_ex_ctrl.io.data.ex_ctrl.jalr @[cpu-bp.scala 277:23]
    wire forward_a_mux : UInt<32> @[cpu-bp.scala 280:27]
    node _T_26 = eq(forwarding.io.forwardA, UInt<1>("h00")) @[cpu-bp.scala 282:32]
    when _T_26 : @[cpu-bp.scala 282:41]
      forward_a_mux <= id_ex.io.data.readdata1 @[cpu-bp.scala 283:19]
      skip @[cpu-bp.scala 282:41]
    else : @[cpu-bp.scala 284:48]
      node _T_27 = eq(forwarding.io.forwardA, UInt<1>("h01")) @[cpu-bp.scala 284:39]
      when _T_27 : @[cpu-bp.scala 284:48]
        forward_a_mux <= ex_mem.io.data.ex_result @[cpu-bp.scala 285:19]
        skip @[cpu-bp.scala 284:48]
      else : @[cpu-bp.scala 286:16]
        forward_a_mux <= write_data @[cpu-bp.scala 287:19]
        skip @[cpu-bp.scala 286:16]
    wire forward_b_mux : UInt<32> @[cpu-bp.scala 291:27]
    node _T_28 = eq(forwarding.io.forwardB, UInt<1>("h00")) @[cpu-bp.scala 293:32]
    when _T_28 : @[cpu-bp.scala 293:41]
      forward_b_mux <= id_ex.io.data.readdata2 @[cpu-bp.scala 294:19]
      skip @[cpu-bp.scala 293:41]
    else : @[cpu-bp.scala 295:48]
      node _T_29 = eq(forwarding.io.forwardB, UInt<1>("h01")) @[cpu-bp.scala 295:39]
      when _T_29 : @[cpu-bp.scala 295:48]
        forward_b_mux <= ex_mem.io.data.ex_result @[cpu-bp.scala 296:19]
        skip @[cpu-bp.scala 295:48]
      else : @[cpu-bp.scala 297:16]
        forward_b_mux <= write_data @[cpu-bp.scala 298:19]
        skip @[cpu-bp.scala 297:16]
    alu.io.operation <= aluControl.io.operation @[cpu-bp.scala 302:20]
    node _T_30 = eq(id_ex_ctrl.io.data.ex_ctrl.xsrc, UInt<1>("h01")) @[cpu-bp.scala 306:41]
    when _T_30 : @[cpu-bp.scala 306:53]
      alu.io.inputx <= id_ex.io.data.pc @[cpu-bp.scala 307:19]
      skip @[cpu-bp.scala 306:53]
    else : @[cpu-bp.scala 308:16]
      alu.io.inputx <= forward_a_mux @[cpu-bp.scala 309:19]
      skip @[cpu-bp.scala 308:16]
    node _T_31 = eq(id_ex_ctrl.io.data.ex_ctrl.plus4, UInt<1>("h01")) @[cpu-bp.scala 312:42]
    when _T_31 : @[cpu-bp.scala 312:54]
      alu.io.inputy <= UInt<3>("h04") @[cpu-bp.scala 313:19]
      skip @[cpu-bp.scala 312:54]
    else : @[cpu-bp.scala 314:16]
      node _T_32 = eq(id_ex_ctrl.io.data.ex_ctrl.ysrc, UInt<1>("h01")) @[cpu-bp.scala 315:43]
      when _T_32 : @[cpu-bp.scala 315:55]
        alu.io.inputy <= id_ex.io.data.sextImm @[cpu-bp.scala 316:21]
        skip @[cpu-bp.scala 315:55]
      else : @[cpu-bp.scala 317:18]
        alu.io.inputy <= forward_b_mux @[cpu-bp.scala 318:21]
        skip @[cpu-bp.scala 317:18]
      skip @[cpu-bp.scala 314:16]
    nextPCmod.io.inputx <= forward_a_mux @[cpu-bp.scala 323:23]
    nextPCmod.io.inputy <= forward_b_mux @[cpu-bp.scala 324:23]
    node _T_33 = bits(id_ex.io.data.instruction, 14, 12) @[cpu-bp.scala 325:51]
    nextPCmod.io.funct3 <= _T_33 @[cpu-bp.scala 325:23]
    nextPCmod.io.pc <= id_ex.io.data.pc @[cpu-bp.scala 326:23]
    nextPCmod.io.imm <= id_ex.io.data.sextImm @[cpu-bp.scala 327:23]
    ex_mem.io.in.instruction <= id_ex.io.data.instruction @[cpu-bp.scala 330:30]
    ex_mem.io.in.mem_writedata <= forward_b_mux @[cpu-bp.scala 331:30]
    ex_mem_ctrl.io.in.mem_ctrl.memop <= id_ex_ctrl.io.data.mem_ctrl.memop @[cpu-bp.scala 333:38]
    ex_mem_ctrl.io.in.wb_ctrl.regwrite <= id_ex_ctrl.io.data.wb_ctrl.regwrite @[cpu-bp.scala 334:38]
    ex_mem_ctrl.io.in.wb_ctrl.toreg <= id_ex_ctrl.io.data.wb_ctrl.toreg @[cpu-bp.scala 335:38]
    ex_mem.io.in.next_pc <= nextPCmod.io.nextpc @[cpu-bp.scala 338:24]
    ex_mem.io.in.taken <= nextPCmod.io.taken @[cpu-bp.scala 339:24]
    node _T_34 = eq(id_ex_ctrl.io.data.ex_ctrl.resultselect, UInt<1>("h00")) @[cpu-bp.scala 342:49]
    when _T_34 : @[cpu-bp.scala 342:58]
      ex_mem.io.in.ex_result <= alu.io.result @[cpu-bp.scala 343:28]
      skip @[cpu-bp.scala 342:58]
    else : @[cpu-bp.scala 344:16]
      ex_mem.io.in.ex_result <= id_ex.io.data.sextImm @[cpu-bp.scala 345:28]
      skip @[cpu-bp.scala 344:16]
    node _T_35 = not(hazard.io.ex_mem_flush) @[cpu-bp.scala 349:46]
    node _T_36 = and(id_ex_ctrl.io.data.ex_ctrl.branch, _T_35) @[cpu-bp.scala 349:43]
    when _T_36 : @[cpu-bp.scala 349:71]
      predictor.io.update <= UInt<1>("h01") @[cpu-bp.scala 351:25]
      predictor.io.taken <= nextPCmod.io.taken @[cpu-bp.scala 352:25]
      node _T_37 = eq(id_ex_ctrl.io.data.ex_ctrl.prediction, nextPCmod.io.taken) @[cpu-bp.scala 355:49]
      when _T_37 : @[cpu-bp.scala 355:73]
        node _T_38 = add(bpCorrect, UInt<1>("h01")) @[cpu-bp.scala 356:32]
        node _T_39 = tail(_T_38, 1) @[cpu-bp.scala 356:32]
        bpCorrect <= _T_39 @[cpu-bp.scala 356:19]
        skip @[cpu-bp.scala 355:73]
      else : @[cpu-bp.scala 358:16]
        node _T_40 = add(bpIncorrect, UInt<1>("h01")) @[cpu-bp.scala 359:34]
        node _T_41 = tail(_T_40, 1) @[cpu-bp.scala 359:34]
        bpIncorrect <= _T_41 @[cpu-bp.scala 359:19]
        skip @[cpu-bp.scala 358:16]
      skip @[cpu-bp.scala 349:71]
    else : @[cpu-bp.scala 363:14]
      predictor.io.update <= UInt<1>("h00") @[cpu-bp.scala 365:25]
      predictor.io.taken is invalid @[cpu-bp.scala 367:25]
      skip @[cpu-bp.scala 363:14]
    when id_ex_ctrl.io.data.ex_ctrl.branch : @[cpu-bp.scala 371:43]
      node _T_42 = neq(id_ex_ctrl.io.data.ex_ctrl.prediction, nextPCmod.io.taken) @[cpu-bp.scala 372:48]
      when _T_42 : @[cpu-bp.scala 372:72]
        ex_mem.io.in.taken <= UInt<1>("h01") @[cpu-bp.scala 373:26]
        skip @[cpu-bp.scala 372:72]
      else : @[cpu-bp.scala 375:16]
        ex_mem.io.in.taken <= UInt<1>("h00") @[cpu-bp.scala 376:26]
        skip @[cpu-bp.scala 375:16]
      skip @[cpu-bp.scala 371:43]
    ex_mem.io.valid <= UInt<1>("h01") @[cpu-bp.scala 381:24]
    ex_mem.io.flush <= hazard.io.ex_mem_flush @[cpu-bp.scala 382:24]
    ex_mem_ctrl.io.valid <= UInt<1>("h01") @[cpu-bp.scala 383:24]
    ex_mem_ctrl.io.flush <= hazard.io.ex_mem_flush @[cpu-bp.scala 384:24]
    io.dmem.address <= ex_mem.io.data.ex_result @[cpu-bp.scala 391:21]
    node _T_43 = eq(ex_mem_ctrl.io.data.mem_ctrl.memop, UInt<2>("h02")) @[cpu-bp.scala 392:59]
    io.dmem.memread <= _T_43 @[cpu-bp.scala 392:21]
    node _T_44 = eq(ex_mem_ctrl.io.data.mem_ctrl.memop, UInt<2>("h03")) @[cpu-bp.scala 393:59]
    io.dmem.memwrite <= _T_44 @[cpu-bp.scala 393:21]
    node _T_45 = bits(ex_mem_ctrl.io.data.mem_ctrl.memop, 1, 1) @[cpu-bp.scala 394:58]
    io.dmem.valid <= _T_45 @[cpu-bp.scala 394:21]
    node _T_46 = bits(ex_mem.io.data.instruction, 13, 12) @[cpu-bp.scala 395:50]
    io.dmem.maskmode <= _T_46 @[cpu-bp.scala 395:21]
    node _T_47 = bits(ex_mem.io.data.instruction, 14, 14) @[cpu-bp.scala 396:51]
    node _T_48 = not(_T_47) @[cpu-bp.scala 396:24]
    io.dmem.sext <= _T_48 @[cpu-bp.scala 396:21]
    io.dmem.writedata <= ex_mem.io.data.mem_writedata @[cpu-bp.scala 397:21]
    next_pc <= ex_mem.io.data.next_pc @[cpu-bp.scala 400:11]
    hazard.io.exmem_taken <= ex_mem.io.data.taken @[cpu-bp.scala 403:25]
    mem_wb.io.in.ex_result <= ex_mem.io.data.ex_result @[cpu-bp.scala 408:28]
    mem_wb.io.in.instruction <= ex_mem.io.data.instruction @[cpu-bp.scala 409:28]
    mem_wb.io.in.readdata <= io.dmem.readdata @[cpu-bp.scala 410:28]
    mem_wb_ctrl.io.in.wb_ctrl.regwrite <= ex_mem_ctrl.io.data.wb_ctrl.regwrite @[cpu-bp.scala 412:38]
    mem_wb_ctrl.io.in.wb_ctrl.toreg <= ex_mem_ctrl.io.data.wb_ctrl.toreg @[cpu-bp.scala 413:38]
    mem_wb.io.valid <= UInt<1>("h01") @[cpu-bp.scala 416:24]
    mem_wb.io.flush <= UInt<1>("h00") @[cpu-bp.scala 417:24]
    mem_wb_ctrl.io.valid <= UInt<1>("h01") @[cpu-bp.scala 418:24]
    mem_wb_ctrl.io.flush <= UInt<1>("h00") @[cpu-bp.scala 419:24]
    node _T_49 = bits(mem_wb.io.data.instruction, 11, 7) @[cpu-bp.scala 425:35]
    node _T_50 = eq(_T_49, UInt<1>("h00")) @[cpu-bp.scala 425:42]
    when _T_50 : @[cpu-bp.scala 425:51]
      registers.io.wen <= UInt<1>("h00") @[cpu-bp.scala 426:22]
      skip @[cpu-bp.scala 425:51]
    else : @[cpu-bp.scala 427:16]
      registers.io.wen <= mem_wb_ctrl.io.data.wb_ctrl.regwrite @[cpu-bp.scala 428:22]
      skip @[cpu-bp.scala 427:16]
    node _T_51 = bits(mem_wb.io.data.instruction, 11, 7) @[cpu-bp.scala 431:54]
    registers.io.writereg <= _T_51 @[cpu-bp.scala 431:25]
    node _T_52 = eq(mem_wb_ctrl.io.data.wb_ctrl.toreg, UInt<1>("h01")) @[cpu-bp.scala 434:43]
    when _T_52 : @[cpu-bp.scala 434:55]
      write_data <= mem_wb.io.data.readdata @[cpu-bp.scala 435:16]
      skip @[cpu-bp.scala 434:55]
    else : @[cpu-bp.scala 436:16]
      write_data <= mem_wb.io.data.ex_result @[cpu-bp.scala 437:16]
      skip @[cpu-bp.scala 436:16]
    node _T_53 = bits(mem_wb.io.data.instruction, 11, 7) @[cpu-bp.scala 441:54]
    forwarding.io.memwbrd <= _T_53 @[cpu-bp.scala 441:25]
    forwarding.io.memwbrw <= mem_wb_ctrl.io.data.wb_ctrl.regwrite @[cpu-bp.scala 442:25]
    
  module DualPortedCombinMemory : 
    input clock : Clock
    input reset : Reset
    output io : {imem : {flip request : {flip ready : UInt<1>, valid : UInt<1>, bits : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}}, response : {valid : UInt<1>, bits : {data : UInt<32>}}}, dmem : {flip request : {flip ready : UInt<1>, valid : UInt<1>, bits : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}}, response : {valid : UInt<1>, bits : {data : UInt<32>}}}}
    
    io.imem.request.bits.operation is invalid @[base-memory-components.scala 32:19]
    io.imem.request.bits.writedata is invalid @[base-memory-components.scala 32:19]
    io.imem.request.bits.address is invalid @[base-memory-components.scala 32:19]
    io.imem.request.valid is invalid @[base-memory-components.scala 32:19]
    io.imem.request.ready is invalid @[base-memory-components.scala 32:19]
    io.dmem.request.bits.operation is invalid @[base-memory-components.scala 33:19]
    io.dmem.request.bits.writedata is invalid @[base-memory-components.scala 33:19]
    io.dmem.request.bits.address is invalid @[base-memory-components.scala 33:19]
    io.dmem.request.valid is invalid @[base-memory-components.scala 33:19]
    io.dmem.request.ready is invalid @[base-memory-components.scala 33:19]
    wire _T : {valid : UInt<1>, bits : {data : UInt<32>}} @[base-memory-components.scala 36:35]
    _T.bits.data <= UInt<32>("h00") @[base-memory-components.scala 36:35]
    _T.valid <= UInt<1>("h00") @[base-memory-components.scala 36:35]
    io.imem.response.bits.data <= _T.bits.data @[base-memory-components.scala 36:20]
    io.imem.response.valid <= _T.valid @[base-memory-components.scala 36:20]
    wire _T_1 : {valid : UInt<1>, bits : {data : UInt<32>}} @[base-memory-components.scala 37:35]
    _T_1.bits.data <= UInt<32>("h00") @[base-memory-components.scala 37:35]
    _T_1.valid <= UInt<1>("h00") @[base-memory-components.scala 37:35]
    io.dmem.response.bits.data <= _T_1.bits.data @[base-memory-components.scala 37:20]
    io.dmem.response.valid <= _T_1.valid @[base-memory-components.scala 37:20]
    cmem memory : UInt<32>[16384] @[base-memory-components.scala 39:19]
    io.imem.response.valid <= UInt<1>("h00") @[memory.scala 17:27]
    io.imem.request.ready <= UInt<1>("h01") @[memory.scala 19:26]
    when io.imem.request.valid : @[memory.scala 25:32]
      node _T_2 = eq(io.imem.request.bits.operation, UInt<1>("h00")) @[memory.scala 30:30]
      node _T_3 = asUInt(reset) @[memory.scala 30:11]
      node _T_4 = or(_T_2, _T_3) @[memory.scala 30:11]
      node _T_5 = eq(_T_4, UInt<1>("h00")) @[memory.scala 30:11]
      when _T_5 : @[memory.scala 30:11]
        printf(clock, UInt<1>(1), "Assertion failed\n    at memory.scala:30 assert(request.operation === Read)\n") @[memory.scala 30:11]
        stop(clock, UInt<1>(1), 1) @[memory.scala 30:11]
        skip @[memory.scala 30:11]
      node _T_6 = lt(io.imem.request.bits.address, UInt<17>("h010000")) @[memory.scala 35:27]
      when _T_6 : @[memory.scala 35:37]
        io.imem.response.valid <= UInt<1>("h01") @[memory.scala 36:30]
        node _T_7 = shr(io.imem.request.bits.address, 2) @[memory.scala 37:60]
        node _T_8 = bits(_T_7, 13, 0) @[memory.scala 37:43]
        infer mport _T_9 = memory[_T_8], clock @[memory.scala 37:43]
        io.imem.response.bits.data <= _T_9 @[memory.scala 37:34]
        skip @[memory.scala 35:37]
      else : @[memory.scala 38:18]
        io.imem.response.valid <= UInt<1>("h00") @[memory.scala 39:30]
        skip @[memory.scala 38:18]
      skip @[memory.scala 25:32]
    else : @[memory.scala 41:16]
      io.imem.response.valid <= UInt<1>("h00") @[memory.scala 42:28]
      skip @[memory.scala 41:16]
    io.dmem.response.valid <= UInt<1>("h00") @[memory.scala 17:27]
    io.dmem.request.ready <= UInt<1>("h01") @[memory.scala 19:26]
    when io.dmem.request.valid : @[memory.scala 52:32]
      node _T_10 = neq(io.dmem.request.bits.operation, UInt<1>("h01")) @[memory.scala 56:31]
      node _T_11 = asUInt(reset) @[memory.scala 56:12]
      node _T_12 = or(_T_10, _T_11) @[memory.scala 56:12]
      node _T_13 = eq(_T_12, UInt<1>("h00")) @[memory.scala 56:12]
      when _T_13 : @[memory.scala 56:12]
        printf(clock, UInt<1>(1), "Assertion failed\n    at memory.scala:56 assert (request.operation =/= Write)\n") @[memory.scala 56:12]
        stop(clock, UInt<1>(1), 1) @[memory.scala 56:12]
        skip @[memory.scala 56:12]
      node _T_14 = lt(io.dmem.request.bits.address, UInt<17>("h010000")) @[memory.scala 58:29]
      node _T_15 = asUInt(reset) @[memory.scala 58:12]
      node _T_16 = or(_T_14, _T_15) @[memory.scala 58:12]
      node _T_17 = eq(_T_16, UInt<1>("h00")) @[memory.scala 58:12]
      when _T_17 : @[memory.scala 58:12]
        printf(clock, UInt<1>(1), "Assertion failed\n    at memory.scala:58 assert (request.address < size.U)\n") @[memory.scala 58:12]
        stop(clock, UInt<1>(1), 1) @[memory.scala 58:12]
        skip @[memory.scala 58:12]
      node _T_18 = shr(io.dmem.request.bits.address, 2) @[memory.scala 61:58]
      node _T_19 = bits(_T_18, 13, 0) @[memory.scala 61:46]
      read mport _T_20 = memory[_T_19], clock @[memory.scala 61:46]
      io.dmem.response.bits.data <= _T_20 @[memory.scala 61:32]
      io.dmem.response.valid <= UInt<1>("h01") @[memory.scala 62:28]
      node _T_21 = eq(io.dmem.request.bits.operation, UInt<2>("h02")) @[memory.scala 65:29]
      when _T_21 : @[memory.scala 65:44]
        node _T_22 = shr(io.dmem.request.bits.address, 2) @[memory.scala 66:25]
        node _T_23 = bits(_T_22, 13, 0) @[memory.scala 66:13]
        infer mport _T_24 = memory[_T_23], clock @[memory.scala 66:13]
        _T_24 <= io.dmem.request.bits.writedata @[memory.scala 66:31]
        skip @[memory.scala 65:44]
      skip @[memory.scala 52:32]
    else : @[memory.scala 68:16]
      io.dmem.response.valid <= UInt<1>("h00") @[memory.scala 69:28]
      skip @[memory.scala 68:16]
    
  module ICombinMemPort : 
    input clock : Clock
    input reset : Reset
    output io : {pipeline : {flip address : UInt<32>, flip valid : UInt<1>, good : UInt<1>, instruction : UInt<32>, ready : UInt<1>}, flip bus : {flip request : {flip ready : UInt<1>, valid : UInt<1>, bits : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}}, response : {valid : UInt<1>, bits : {data : UInt<32>}}}}
    
    wire _T : {flip address : UInt<32>, flip valid : UInt<1>, good : UInt<1>, instruction : UInt<32>, ready : UInt<1>} @[base-memory-components.scala 52:31]
    _T.ready <= UInt<1>("h00") @[base-memory-components.scala 52:31]
    _T.instruction <= UInt<32>("h00") @[base-memory-components.scala 52:31]
    _T.good <= UInt<1>("h00") @[base-memory-components.scala 52:31]
    _T.valid <= UInt<1>("h00") @[base-memory-components.scala 52:31]
    _T.address <= UInt<32>("h00") @[base-memory-components.scala 52:31]
    io.pipeline.ready <= _T.ready @[base-memory-components.scala 52:15]
    io.pipeline.instruction <= _T.instruction @[base-memory-components.scala 52:15]
    io.pipeline.good <= _T.good @[base-memory-components.scala 52:15]
    _T.valid <= io.pipeline.valid @[base-memory-components.scala 52:15]
    _T.address <= io.pipeline.address @[base-memory-components.scala 52:15]
    io.bus.response.bits.data is invalid @[base-memory-components.scala 57:15]
    io.bus.response.valid is invalid @[base-memory-components.scala 57:15]
    io.bus.request.bits.operation is invalid @[base-memory-components.scala 57:15]
    io.bus.request.bits.writedata is invalid @[base-memory-components.scala 57:15]
    io.bus.request.bits.address is invalid @[base-memory-components.scala 57:15]
    io.bus.request.valid is invalid @[base-memory-components.scala 57:15]
    io.bus.request.ready is invalid @[base-memory-components.scala 57:15]
    when io.pipeline.valid : @[memory-combin-ports.scala 16:28]
      wire _T_1 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>} @[memory-combin-ports.scala 17:23]
      _T_1.address <= io.pipeline.address @[memory-combin-ports.scala 18:23]
      _T_1.operation <= UInt<1>("h00") @[memory-combin-ports.scala 19:23]
      _T_1.writedata <= UInt<1>("h00") @[memory-combin-ports.scala 20:23]
      io.bus.request.bits.operation <= _T_1.operation @[memory-combin-ports.scala 22:26]
      io.bus.request.bits.writedata <= _T_1.writedata @[memory-combin-ports.scala 22:26]
      io.bus.request.bits.address <= _T_1.address @[memory-combin-ports.scala 22:26]
      io.bus.request.valid <= UInt<1>("h01") @[memory-combin-ports.scala 23:26]
      skip @[memory-combin-ports.scala 16:28]
    else : @[memory-combin-ports.scala 24:16]
      io.bus.request.valid <= UInt<1>("h00") @[memory-combin-ports.scala 25:26]
      skip @[memory-combin-ports.scala 24:16]
    io.pipeline.ready <= UInt<1>("h01") @[memory-combin-ports.scala 29:21]
    io.pipeline.good <= UInt<1>("h01") @[memory-combin-ports.scala 32:20]
    io.pipeline.instruction <= io.bus.response.bits.data @[memory-combin-ports.scala 33:27]
    
  module DCombinMemPort : 
    input clock : Clock
    input reset : Reset
    output io : {pipeline : {flip address : UInt<32>, flip valid : UInt<1>, good : UInt<1>, flip writedata : UInt<32>, flip memread : UInt<1>, flip memwrite : UInt<1>, flip maskmode : UInt<2>, flip sext : UInt<1>, readdata : UInt<32>}, flip bus : {flip request : {flip ready : UInt<1>, valid : UInt<1>, bits : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}}, response : {valid : UInt<1>, bits : {data : UInt<32>}}}}
    
    wire _T : {flip address : UInt<32>, flip valid : UInt<1>, good : UInt<1>, flip writedata : UInt<32>, flip memread : UInt<1>, flip memwrite : UInt<1>, flip maskmode : UInt<2>, flip sext : UInt<1>, readdata : UInt<32>} @[base-memory-components.scala 69:31]
    _T.readdata <= UInt<32>("h00") @[base-memory-components.scala 69:31]
    _T.sext <= UInt<1>("h00") @[base-memory-components.scala 69:31]
    _T.maskmode <= UInt<2>("h00") @[base-memory-components.scala 69:31]
    _T.memwrite <= UInt<1>("h00") @[base-memory-components.scala 69:31]
    _T.memread <= UInt<1>("h00") @[base-memory-components.scala 69:31]
    _T.writedata <= UInt<32>("h00") @[base-memory-components.scala 69:31]
    _T.good <= UInt<1>("h00") @[base-memory-components.scala 69:31]
    _T.valid <= UInt<1>("h00") @[base-memory-components.scala 69:31]
    _T.address <= UInt<32>("h00") @[base-memory-components.scala 69:31]
    io.pipeline.readdata <= _T.readdata @[base-memory-components.scala 69:15]
    _T.sext <= io.pipeline.sext @[base-memory-components.scala 69:15]
    _T.maskmode <= io.pipeline.maskmode @[base-memory-components.scala 69:15]
    _T.memwrite <= io.pipeline.memwrite @[base-memory-components.scala 69:15]
    _T.memread <= io.pipeline.memread @[base-memory-components.scala 69:15]
    _T.writedata <= io.pipeline.writedata @[base-memory-components.scala 69:15]
    io.pipeline.good <= _T.good @[base-memory-components.scala 69:15]
    _T.valid <= io.pipeline.valid @[base-memory-components.scala 69:15]
    _T.address <= io.pipeline.address @[base-memory-components.scala 69:15]
    io.bus.response.bits.data is invalid @[base-memory-components.scala 74:15]
    io.bus.response.valid is invalid @[base-memory-components.scala 74:15]
    io.bus.request.bits.operation is invalid @[base-memory-components.scala 74:15]
    io.bus.request.bits.writedata is invalid @[base-memory-components.scala 74:15]
    io.bus.request.bits.address is invalid @[base-memory-components.scala 74:15]
    io.bus.request.valid is invalid @[base-memory-components.scala 74:15]
    io.bus.request.ready is invalid @[base-memory-components.scala 74:15]
    io.pipeline.good <= io.bus.response.valid @[base-memory-components.scala 76:20]
    io.pipeline.good <= UInt<1>("h01") @[memory-combin-ports.scala 42:20]
    node _T_1 = or(io.pipeline.memread, io.pipeline.memwrite) @[memory-combin-ports.scala 44:51]
    node _T_2 = and(io.pipeline.valid, _T_1) @[memory-combin-ports.scala 44:27]
    when _T_2 : @[memory-combin-ports.scala 44:77]
      node _T_3 = and(io.pipeline.memread, io.pipeline.memwrite) @[memory-combin-ports.scala 46:34]
      node _T_4 = eq(_T_3, UInt<1>("h00")) @[memory-combin-ports.scala 46:12]
      node _T_5 = asUInt(reset) @[memory-combin-ports.scala 46:11]
      node _T_6 = or(_T_4, _T_5) @[memory-combin-ports.scala 46:11]
      node _T_7 = eq(_T_6, UInt<1>("h00")) @[memory-combin-ports.scala 46:11]
      when _T_7 : @[memory-combin-ports.scala 46:11]
        printf(clock, UInt<1>(1), "Assertion failed\n    at memory-combin-ports.scala:46 assert(!(io.pipeline.memread && io.pipeline.memwrite))\n") @[memory-combin-ports.scala 46:11]
        stop(clock, UInt<1>(1), 1) @[memory-combin-ports.scala 46:11]
        skip @[memory-combin-ports.scala 46:11]
      io.bus.request.bits.address <= io.pipeline.address @[memory-combin-ports.scala 48:33]
      io.bus.request.valid <= UInt<1>("h01") @[memory-combin-ports.scala 49:26]
      when io.pipeline.memwrite : @[memory-combin-ports.scala 51:33]
        io.bus.request.bits.operation <= UInt<2>("h02") @[memory-combin-ports.scala 60:37]
        skip @[memory-combin-ports.scala 51:33]
      else : @[memory-combin-ports.scala 61:18]
        io.bus.request.bits.operation <= UInt<1>("h00") @[memory-combin-ports.scala 63:37]
        skip @[memory-combin-ports.scala 61:18]
      skip @[memory-combin-ports.scala 44:77]
    else : @[memory-combin-ports.scala 65:16]
      io.bus.request.valid <= UInt<1>("h00") @[memory-combin-ports.scala 67:26]
      skip @[memory-combin-ports.scala 65:16]
    when io.bus.response.valid : @[memory-combin-ports.scala 71:32]
      when io.pipeline.memwrite : @[memory-combin-ports.scala 72:33]
        wire _T_8 : UInt<32> @[memory-combin-ports.scala 74:28]
        node _T_9 = neq(io.pipeline.maskmode, UInt<2>("h02")) @[memory-combin-ports.scala 77:34]
        when _T_9 : @[memory-combin-ports.scala 77:43]
          node _T_10 = bits(io.pipeline.address, 1, 0) @[memory-combin-ports.scala 79:42]
          wire _T_11 : UInt<32> @[memory-combin-ports.scala 80:29]
          _T_11 <= io.bus.response.bits.data @[memory-combin-ports.scala 82:18]
          node _T_12 = eq(io.pipeline.maskmode, UInt<1>("h00")) @[memory-combin-ports.scala 85:36]
          when _T_12 : @[memory-combin-ports.scala 85:45]
            node _T_13 = eq(_T_10, UInt<1>("h00")) @[memory-combin-ports.scala 86:23]
            when _T_13 : @[memory-combin-ports.scala 86:32]
              node _T_14 = bits(_T_11, 31, 8) @[memory-combin-ports.scala 87:38]
              node _T_15 = bits(io.pipeline.writedata, 7, 0) @[memory-combin-ports.scala 87:67]
              node _T_16 = cat(_T_14, _T_15) @[Cat.scala 30:58]
              _T_8 <= _T_16 @[memory-combin-ports.scala 87:23]
              skip @[memory-combin-ports.scala 86:32]
            else : @[memory-combin-ports.scala 88:38]
              node _T_17 = eq(_T_10, UInt<1>("h01")) @[memory-combin-ports.scala 88:29]
              when _T_17 : @[memory-combin-ports.scala 88:38]
                node _T_18 = bits(_T_11, 31, 16) @[memory-combin-ports.scala 89:38]
                node _T_19 = bits(io.pipeline.writedata, 15, 8) @[memory-combin-ports.scala 89:72]
                node _T_20 = bits(_T_11, 7, 0) @[memory-combin-ports.scala 89:88]
                node _T_21 = cat(_T_19, _T_20) @[Cat.scala 30:58]
                node _T_22 = cat(_T_18, _T_21) @[Cat.scala 30:58]
                _T_8 <= _T_22 @[memory-combin-ports.scala 89:23]
                skip @[memory-combin-ports.scala 88:38]
              else : @[memory-combin-ports.scala 90:38]
                node _T_23 = eq(_T_10, UInt<2>("h02")) @[memory-combin-ports.scala 90:29]
                when _T_23 : @[memory-combin-ports.scala 90:38]
                  node _T_24 = bits(_T_11, 31, 24) @[memory-combin-ports.scala 91:38]
                  node _T_25 = bits(io.pipeline.writedata, 23, 16) @[memory-combin-ports.scala 91:72]
                  node _T_26 = bits(_T_11, 15, 0) @[memory-combin-ports.scala 91:88]
                  node _T_27 = cat(_T_25, _T_26) @[Cat.scala 30:58]
                  node _T_28 = cat(_T_24, _T_27) @[Cat.scala 30:58]
                  _T_8 <= _T_28 @[memory-combin-ports.scala 91:23]
                  skip @[memory-combin-ports.scala 90:38]
                else : @[memory-combin-ports.scala 92:23]
                  node _T_29 = bits(io.pipeline.writedata, 31, 24) @[memory-combin-ports.scala 93:51]
                  node _T_30 = bits(_T_11, 23, 0) @[memory-combin-ports.scala 93:68]
                  node _T_31 = cat(_T_29, _T_30) @[Cat.scala 30:58]
                  _T_8 <= _T_31 @[memory-combin-ports.scala 93:23]
                  skip @[memory-combin-ports.scala 92:23]
            skip @[memory-combin-ports.scala 85:45]
          else : @[memory-combin-ports.scala 95:22]
            node _T_32 = eq(_T_10, UInt<1>("h00")) @[memory-combin-ports.scala 96:24]
            when _T_32 : @[memory-combin-ports.scala 96:33]
              node _T_33 = bits(_T_11, 31, 16) @[memory-combin-ports.scala 97:38]
              node _T_34 = bits(io.pipeline.writedata, 15, 0) @[memory-combin-ports.scala 97:67]
              node _T_35 = cat(_T_33, _T_34) @[Cat.scala 30:58]
              _T_8 <= _T_35 @[memory-combin-ports.scala 97:23]
              skip @[memory-combin-ports.scala 96:33]
            else : @[memory-combin-ports.scala 98:23]
              node _T_36 = bits(io.pipeline.writedata, 31, 16) @[memory-combin-ports.scala 99:51]
              node _T_37 = bits(_T_11, 15, 0) @[memory-combin-ports.scala 99:68]
              node _T_38 = cat(_T_36, _T_37) @[Cat.scala 30:58]
              _T_8 <= _T_38 @[memory-combin-ports.scala 99:23]
              skip @[memory-combin-ports.scala 98:23]
            skip @[memory-combin-ports.scala 95:22]
          skip @[memory-combin-ports.scala 77:43]
        else : @[memory-combin-ports.scala 102:20]
          _T_8 <= io.pipeline.writedata @[memory-combin-ports.scala 104:19]
          skip @[memory-combin-ports.scala 102:20]
        io.bus.request.bits.writedata <= _T_8 @[memory-combin-ports.scala 107:37]
        skip @[memory-combin-ports.scala 72:33]
      else : @[memory-combin-ports.scala 108:39]
        when io.pipeline.memread : @[memory-combin-ports.scala 108:39]
          wire _T_39 : UInt<32> @[memory-combin-ports.scala 110:36]
          wire _T_40 : UInt<32> @[memory-combin-ports.scala 111:36]
          node _T_41 = bits(io.pipeline.address, 1, 0) @[memory-combin-ports.scala 113:39]
          node _T_42 = eq(io.pipeline.maskmode, UInt<1>("h00")) @[memory-combin-ports.scala 114:34]
          when _T_42 : @[memory-combin-ports.scala 114:43]
            node _T_43 = mul(_T_41, UInt<4>("h08")) @[memory-combin-ports.scala 116:64]
            node _T_44 = dshr(io.bus.response.bits.data, _T_43) @[memory-combin-ports.scala 116:53]
            node _T_45 = and(_T_44, UInt<8>("h0ff")) @[memory-combin-ports.scala 116:72]
            _T_39 <= _T_45 @[memory-combin-ports.scala 116:23]
            skip @[memory-combin-ports.scala 114:43]
          else : @[memory-combin-ports.scala 117:50]
            node _T_46 = eq(io.pipeline.maskmode, UInt<1>("h01")) @[memory-combin-ports.scala 117:41]
            when _T_46 : @[memory-combin-ports.scala 117:50]
              node _T_47 = mul(_T_41, UInt<4>("h08")) @[memory-combin-ports.scala 119:64]
              node _T_48 = dshr(io.bus.response.bits.data, _T_47) @[memory-combin-ports.scala 119:53]
              node _T_49 = and(_T_48, UInt<16>("h0ffff")) @[memory-combin-ports.scala 119:72]
              _T_39 <= _T_49 @[memory-combin-ports.scala 119:23]
              skip @[memory-combin-ports.scala 117:50]
            else : @[memory-combin-ports.scala 120:20]
              _T_39 <= io.bus.response.bits.data @[memory-combin-ports.scala 121:23]
              skip @[memory-combin-ports.scala 120:20]
          when io.pipeline.sext : @[memory-combin-ports.scala 124:31]
            node _T_50 = eq(io.pipeline.maskmode, UInt<1>("h00")) @[memory-combin-ports.scala 125:36]
            when _T_50 : @[memory-combin-ports.scala 125:45]
              node _T_51 = bits(_T_39, 7, 7) @[memory-combin-ports.scala 127:59]
              node _T_52 = bits(_T_51, 0, 0) @[Bitwise.scala 72:15]
              node _T_53 = mux(_T_52, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
              node _T_54 = bits(_T_39, 7, 0) @[memory-combin-ports.scala 127:79]
              node _T_55 = cat(_T_53, _T_54) @[Cat.scala 30:58]
              _T_40 <= _T_55 @[memory-combin-ports.scala 127:30]
              skip @[memory-combin-ports.scala 125:45]
            else : @[memory-combin-ports.scala 128:52]
              node _T_56 = eq(io.pipeline.maskmode, UInt<1>("h01")) @[memory-combin-ports.scala 128:43]
              when _T_56 : @[memory-combin-ports.scala 128:52]
                node _T_57 = bits(_T_39, 15, 15) @[memory-combin-ports.scala 130:59]
                node _T_58 = bits(_T_57, 0, 0) @[Bitwise.scala 72:15]
                node _T_59 = mux(_T_58, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                node _T_60 = bits(_T_39, 15, 0) @[memory-combin-ports.scala 130:79]
                node _T_61 = cat(_T_59, _T_60) @[Cat.scala 30:58]
                _T_40 <= _T_61 @[memory-combin-ports.scala 130:30]
                skip @[memory-combin-ports.scala 128:52]
              else : @[memory-combin-ports.scala 131:22]
                _T_40 <= _T_39 @[memory-combin-ports.scala 133:30]
                skip @[memory-combin-ports.scala 131:22]
            skip @[memory-combin-ports.scala 124:31]
          else : @[memory-combin-ports.scala 135:20]
            _T_40 <= _T_39 @[memory-combin-ports.scala 136:28]
            skip @[memory-combin-ports.scala 135:20]
          io.pipeline.readdata <= _T_40 @[memory-combin-ports.scala 139:28]
          skip @[memory-combin-ports.scala 108:39]
      skip @[memory-combin-ports.scala 71:32]
    
  module Dino1Core : 
    input clock : Clock
    input reset : UInt<1>
    output io : {success : UInt<1>}
    
    io.success is invalid @[top.scala 10:14]
    inst cpu0 of PipelinedCPUBP @[top.scala 12:20]
    cpu0.clock <= clock
    cpu0.reset <= reset
    inst mem0 of DualPortedCombinMemory @[top.scala 13:20]
    mem0.clock <= clock
    mem0.reset <= reset
    inst imem0 of ICombinMemPort @[top.scala 14:21]
    imem0.clock <= clock
    imem0.reset <= reset
    inst dmem0 of DCombinMemPort @[top.scala 15:21]
    dmem0.clock <= clock
    dmem0.reset <= reset
    mem0.io.imem.request.bits.operation <= imem0.io.bus.request.bits.operation @[base-memory-components.scala 16:26]
    mem0.io.imem.request.bits.writedata <= imem0.io.bus.request.bits.writedata @[base-memory-components.scala 16:26]
    mem0.io.imem.request.bits.address <= imem0.io.bus.request.bits.address @[base-memory-components.scala 16:26]
    mem0.io.imem.request.valid <= imem0.io.bus.request.valid @[base-memory-components.scala 16:26]
    imem0.io.bus.request.ready <= mem0.io.imem.request.ready @[base-memory-components.scala 16:26]
    imem0.io.bus.response.bits.data <= mem0.io.imem.response.bits.data @[base-memory-components.scala 17:26]
    imem0.io.bus.response.valid <= mem0.io.imem.response.valid @[base-memory-components.scala 17:26]
    mem0.io.dmem.request.bits.operation <= dmem0.io.bus.request.bits.operation @[base-memory-components.scala 19:26]
    mem0.io.dmem.request.bits.writedata <= dmem0.io.bus.request.bits.writedata @[base-memory-components.scala 19:26]
    mem0.io.dmem.request.bits.address <= dmem0.io.bus.request.bits.address @[base-memory-components.scala 19:26]
    mem0.io.dmem.request.valid <= dmem0.io.bus.request.valid @[base-memory-components.scala 19:26]
    dmem0.io.bus.request.ready <= mem0.io.dmem.request.ready @[base-memory-components.scala 19:26]
    dmem0.io.bus.response.bits.data <= mem0.io.dmem.response.bits.data @[base-memory-components.scala 20:26]
    dmem0.io.bus.response.valid <= mem0.io.dmem.response.valid @[base-memory-components.scala 20:26]
    cpu0.io.imem.ready <= imem0.io.pipeline.ready @[top.scala 17:16]
    cpu0.io.imem.instruction <= imem0.io.pipeline.instruction @[top.scala 17:16]
    cpu0.io.imem.good <= imem0.io.pipeline.good @[top.scala 17:16]
    imem0.io.pipeline.valid <= cpu0.io.imem.valid @[top.scala 17:16]
    imem0.io.pipeline.address <= cpu0.io.imem.address @[top.scala 17:16]
    cpu0.io.dmem.readdata <= dmem0.io.pipeline.readdata @[top.scala 18:16]
    dmem0.io.pipeline.sext <= cpu0.io.dmem.sext @[top.scala 18:16]
    dmem0.io.pipeline.maskmode <= cpu0.io.dmem.maskmode @[top.scala 18:16]
    dmem0.io.pipeline.memwrite <= cpu0.io.dmem.memwrite @[top.scala 18:16]
    dmem0.io.pipeline.memread <= cpu0.io.dmem.memread @[top.scala 18:16]
    dmem0.io.pipeline.writedata <= cpu0.io.dmem.writedata @[top.scala 18:16]
    cpu0.io.dmem.good <= dmem0.io.pipeline.good @[top.scala 18:16]
    dmem0.io.pipeline.valid <= cpu0.io.dmem.valid @[top.scala 18:16]
    dmem0.io.pipeline.address <= cpu0.io.dmem.address @[top.scala 18:16]
    
