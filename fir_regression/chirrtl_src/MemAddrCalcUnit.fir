circuit MemAddrCalcUnit :
  module BreakpointUnit_4 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip status : {debug : UInt<1>, cease : UInt<1>, wfi : UInt<1>, isa : UInt<32>, dprv : UInt<2>, prv : UInt<2>, sd : UInt<1>, zero2 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, sd_rv32 : UInt<1>, zero1 : UInt<8>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, vs : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}, flip bp : {control : {ttype : UInt<4>, dmode : UInt<1>, maskmax : UInt<6>, reserved : UInt<40>, action : UInt<1>, chain : UInt<1>, zero : UInt<2>, tmatch : UInt<2>, m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>}, address : UInt<39>}[0], flip pc : UInt<39>, flip ea : UInt<39>, xcpt_if : UInt<1>, xcpt_ld : UInt<1>, xcpt_st : UInt<1>, debug_if : UInt<1>, debug_ld : UInt<1>, debug_st : UInt<1>, bpwatch : {valid : UInt<1>[1], rvalid : UInt<1>[1], wvalid : UInt<1>[1], ivalid : UInt<1>[1], action : UInt<3>}[0]}
    
    io.xcpt_if <= UInt<1>("h00") @[Breakpoint.scala 74:14]
    io.xcpt_ld <= UInt<1>("h00") @[Breakpoint.scala 75:14]
    io.xcpt_st <= UInt<1>("h00") @[Breakpoint.scala 76:14]
    io.debug_if <= UInt<1>("h00") @[Breakpoint.scala 77:15]
    io.debug_ld <= UInt<1>("h00") @[Breakpoint.scala 78:15]
    io.debug_st <= UInt<1>("h00") @[Breakpoint.scala 79:15]
    
  module MemAddrCalcUnit : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {uop : {uopc : UInt<7>, inst : UInt<32>, debug_inst : UInt<32>, is_rvc : UInt<1>, debug_pc : UInt<40>, iq_type : UInt<3>, fu_code : UInt<10>, ctrl : {br_type : UInt<4>, op1_sel : UInt<2>, op2_sel : UInt<3>, imm_sel : UInt<3>, op_fcn : UInt<4>, fcn_dw : UInt<1>, csr_cmd : UInt<3>, is_load : UInt<1>, is_sta : UInt<1>, is_std : UInt<1>}, iw_state : UInt<2>, iw_p1_poisoned : UInt<1>, iw_p2_poisoned : UInt<1>, is_br : UInt<1>, is_jalr : UInt<1>, is_jal : UInt<1>, is_sfb : UInt<1>, br_mask : UInt<8>, br_tag : UInt<3>, ftq_idx : UInt<4>, edge_inst : UInt<1>, pc_lob : UInt<6>, taken : UInt<1>, imm_packed : UInt<20>, csr_addr : UInt<12>, rob_idx : UInt<5>, ldq_idx : UInt<3>, stq_idx : UInt<3>, rxq_idx : UInt<2>, pdst : UInt<6>, prs1 : UInt<6>, prs2 : UInt<6>, prs3 : UInt<6>, ppred : UInt<4>, prs1_busy : UInt<1>, prs2_busy : UInt<1>, prs3_busy : UInt<1>, ppred_busy : UInt<1>, stale_pdst : UInt<6>, exception : UInt<1>, exc_cause : UInt<64>, bypassable : UInt<1>, mem_cmd : UInt<5>, mem_size : UInt<2>, mem_signed : UInt<1>, is_fence : UInt<1>, is_fencei : UInt<1>, is_amo : UInt<1>, uses_ldq : UInt<1>, uses_stq : UInt<1>, is_sys_pc2epc : UInt<1>, is_unique : UInt<1>, flush_on_commit : UInt<1>, ldst_is_rs1 : UInt<1>, ldst : UInt<6>, lrs1 : UInt<6>, lrs2 : UInt<6>, lrs3 : UInt<6>, ldst_val : UInt<1>, dst_rtype : UInt<2>, lrs1_rtype : UInt<2>, lrs2_rtype : UInt<2>, frs3_en : UInt<1>, fp_val : UInt<1>, fp_single : UInt<1>, xcpt_pf_if : UInt<1>, xcpt_ae_if : UInt<1>, xcpt_ma_if : UInt<1>, bp_debug_if : UInt<1>, bp_xcpt_if : UInt<1>, debug_fsrc : UInt<2>, debug_tsrc : UInt<2>}, rs1_data : UInt<65>, rs2_data : UInt<65>, rs3_data : UInt<65>, pred_data : UInt<1>, kill : UInt<1>}}, resp : {flip ready : UInt<1>, valid : UInt<1>, bits : {uop : {uopc : UInt<7>, inst : UInt<32>, debug_inst : UInt<32>, is_rvc : UInt<1>, debug_pc : UInt<40>, iq_type : UInt<3>, fu_code : UInt<10>, ctrl : {br_type : UInt<4>, op1_sel : UInt<2>, op2_sel : UInt<3>, imm_sel : UInt<3>, op_fcn : UInt<4>, fcn_dw : UInt<1>, csr_cmd : UInt<3>, is_load : UInt<1>, is_sta : UInt<1>, is_std : UInt<1>}, iw_state : UInt<2>, iw_p1_poisoned : UInt<1>, iw_p2_poisoned : UInt<1>, is_br : UInt<1>, is_jalr : UInt<1>, is_jal : UInt<1>, is_sfb : UInt<1>, br_mask : UInt<8>, br_tag : UInt<3>, ftq_idx : UInt<4>, edge_inst : UInt<1>, pc_lob : UInt<6>, taken : UInt<1>, imm_packed : UInt<20>, csr_addr : UInt<12>, rob_idx : UInt<5>, ldq_idx : UInt<3>, stq_idx : UInt<3>, rxq_idx : UInt<2>, pdst : UInt<6>, prs1 : UInt<6>, prs2 : UInt<6>, prs3 : UInt<6>, ppred : UInt<4>, prs1_busy : UInt<1>, prs2_busy : UInt<1>, prs3_busy : UInt<1>, ppred_busy : UInt<1>, stale_pdst : UInt<6>, exception : UInt<1>, exc_cause : UInt<64>, bypassable : UInt<1>, mem_cmd : UInt<5>, mem_size : UInt<2>, mem_signed : UInt<1>, is_fence : UInt<1>, is_fencei : UInt<1>, is_amo : UInt<1>, uses_ldq : UInt<1>, uses_stq : UInt<1>, is_sys_pc2epc : UInt<1>, is_unique : UInt<1>, flush_on_commit : UInt<1>, ldst_is_rs1 : UInt<1>, ldst : UInt<6>, lrs1 : UInt<6>, lrs2 : UInt<6>, lrs3 : UInt<6>, ldst_val : UInt<1>, dst_rtype : UInt<2>, lrs1_rtype : UInt<2>, lrs2_rtype : UInt<2>, frs3_en : UInt<1>, fp_val : UInt<1>, fp_single : UInt<1>, xcpt_pf_if : UInt<1>, xcpt_ae_if : UInt<1>, xcpt_ma_if : UInt<1>, bp_debug_if : UInt<1>, bp_xcpt_if : UInt<1>, debug_fsrc : UInt<2>, debug_tsrc : UInt<2>}, predicated : UInt<1>, data : UInt<65>, fflags : {valid : UInt<1>, bits : {uop : {uopc : UInt<7>, inst : UInt<32>, debug_inst : UInt<32>, is_rvc : UInt<1>, debug_pc : UInt<40>, iq_type : UInt<3>, fu_code : UInt<10>, ctrl : {br_type : UInt<4>, op1_sel : UInt<2>, op2_sel : UInt<3>, imm_sel : UInt<3>, op_fcn : UInt<4>, fcn_dw : UInt<1>, csr_cmd : UInt<3>, is_load : UInt<1>, is_sta : UInt<1>, is_std : UInt<1>}, iw_state : UInt<2>, iw_p1_poisoned : UInt<1>, iw_p2_poisoned : UInt<1>, is_br : UInt<1>, is_jalr : UInt<1>, is_jal : UInt<1>, is_sfb : UInt<1>, br_mask : UInt<8>, br_tag : UInt<3>, ftq_idx : UInt<4>, edge_inst : UInt<1>, pc_lob : UInt<6>, taken : UInt<1>, imm_packed : UInt<20>, csr_addr : UInt<12>, rob_idx : UInt<5>, ldq_idx : UInt<3>, stq_idx : UInt<3>, rxq_idx : UInt<2>, pdst : UInt<6>, prs1 : UInt<6>, prs2 : UInt<6>, prs3 : UInt<6>, ppred : UInt<4>, prs1_busy : UInt<1>, prs2_busy : UInt<1>, prs3_busy : UInt<1>, ppred_busy : UInt<1>, stale_pdst : UInt<6>, exception : UInt<1>, exc_cause : UInt<64>, bypassable : UInt<1>, mem_cmd : UInt<5>, mem_size : UInt<2>, mem_signed : UInt<1>, is_fence : UInt<1>, is_fencei : UInt<1>, is_amo : UInt<1>, uses_ldq : UInt<1>, uses_stq : UInt<1>, is_sys_pc2epc : UInt<1>, is_unique : UInt<1>, flush_on_commit : UInt<1>, ldst_is_rs1 : UInt<1>, ldst : UInt<6>, lrs1 : UInt<6>, lrs2 : UInt<6>, lrs3 : UInt<6>, ldst_val : UInt<1>, dst_rtype : UInt<2>, lrs1_rtype : UInt<2>, lrs2_rtype : UInt<2>, frs3_en : UInt<1>, fp_val : UInt<1>, fp_single : UInt<1>, xcpt_pf_if : UInt<1>, xcpt_ae_if : UInt<1>, xcpt_ma_if : UInt<1>, bp_debug_if : UInt<1>, bp_xcpt_if : UInt<1>, debug_fsrc : UInt<2>, debug_tsrc : UInt<2>}, flags : UInt<5>}}, addr : UInt<40>, mxcpt : {valid : UInt<1>, bits : UInt<17>}, sfence : {valid : UInt<1>, bits : {rs1 : UInt<1>, rs2 : UInt<1>, addr : UInt<39>, asid : UInt<1>}}}}, flip brupdate : {b1 : {resolve_mask : UInt<8>, mispredict_mask : UInt<8>}, b2 : {uop : {uopc : UInt<7>, inst : UInt<32>, debug_inst : UInt<32>, is_rvc : UInt<1>, debug_pc : UInt<40>, iq_type : UInt<3>, fu_code : UInt<10>, ctrl : {br_type : UInt<4>, op1_sel : UInt<2>, op2_sel : UInt<3>, imm_sel : UInt<3>, op_fcn : UInt<4>, fcn_dw : UInt<1>, csr_cmd : UInt<3>, is_load : UInt<1>, is_sta : UInt<1>, is_std : UInt<1>}, iw_state : UInt<2>, iw_p1_poisoned : UInt<1>, iw_p2_poisoned : UInt<1>, is_br : UInt<1>, is_jalr : UInt<1>, is_jal : UInt<1>, is_sfb : UInt<1>, br_mask : UInt<8>, br_tag : UInt<3>, ftq_idx : UInt<4>, edge_inst : UInt<1>, pc_lob : UInt<6>, taken : UInt<1>, imm_packed : UInt<20>, csr_addr : UInt<12>, rob_idx : UInt<5>, ldq_idx : UInt<3>, stq_idx : UInt<3>, rxq_idx : UInt<2>, pdst : UInt<6>, prs1 : UInt<6>, prs2 : UInt<6>, prs3 : UInt<6>, ppred : UInt<4>, prs1_busy : UInt<1>, prs2_busy : UInt<1>, prs3_busy : UInt<1>, ppred_busy : UInt<1>, stale_pdst : UInt<6>, exception : UInt<1>, exc_cause : UInt<64>, bypassable : UInt<1>, mem_cmd : UInt<5>, mem_size : UInt<2>, mem_signed : UInt<1>, is_fence : UInt<1>, is_fencei : UInt<1>, is_amo : UInt<1>, uses_ldq : UInt<1>, uses_stq : UInt<1>, is_sys_pc2epc : UInt<1>, is_unique : UInt<1>, flush_on_commit : UInt<1>, ldst_is_rs1 : UInt<1>, ldst : UInt<6>, lrs1 : UInt<6>, lrs2 : UInt<6>, lrs3 : UInt<6>, ldst_val : UInt<1>, dst_rtype : UInt<2>, lrs1_rtype : UInt<2>, lrs2_rtype : UInt<2>, frs3_en : UInt<1>, fp_val : UInt<1>, fp_single : UInt<1>, xcpt_pf_if : UInt<1>, xcpt_ae_if : UInt<1>, xcpt_ma_if : UInt<1>, bp_debug_if : UInt<1>, bp_xcpt_if : UInt<1>, debug_fsrc : UInt<2>, debug_tsrc : UInt<2>}, valid : UInt<1>, mispredict : UInt<1>, taken : UInt<1>, cfi_type : UInt<3>, pc_sel : UInt<2>, jalr_target : UInt<40>, target_offset : SInt<1>}}, bypass : {valid : UInt<1>, bits : {uop : {uopc : UInt<7>, inst : UInt<32>, debug_inst : UInt<32>, is_rvc : UInt<1>, debug_pc : UInt<40>, iq_type : UInt<3>, fu_code : UInt<10>, ctrl : {br_type : UInt<4>, op1_sel : UInt<2>, op2_sel : UInt<3>, imm_sel : UInt<3>, op_fcn : UInt<4>, fcn_dw : UInt<1>, csr_cmd : UInt<3>, is_load : UInt<1>, is_sta : UInt<1>, is_std : UInt<1>}, iw_state : UInt<2>, iw_p1_poisoned : UInt<1>, iw_p2_poisoned : UInt<1>, is_br : UInt<1>, is_jalr : UInt<1>, is_jal : UInt<1>, is_sfb : UInt<1>, br_mask : UInt<8>, br_tag : UInt<3>, ftq_idx : UInt<4>, edge_inst : UInt<1>, pc_lob : UInt<6>, taken : UInt<1>, imm_packed : UInt<20>, csr_addr : UInt<12>, rob_idx : UInt<5>, ldq_idx : UInt<3>, stq_idx : UInt<3>, rxq_idx : UInt<2>, pdst : UInt<6>, prs1 : UInt<6>, prs2 : UInt<6>, prs3 : UInt<6>, ppred : UInt<4>, prs1_busy : UInt<1>, prs2_busy : UInt<1>, prs3_busy : UInt<1>, ppred_busy : UInt<1>, stale_pdst : UInt<6>, exception : UInt<1>, exc_cause : UInt<64>, bypassable : UInt<1>, mem_cmd : UInt<5>, mem_size : UInt<2>, mem_signed : UInt<1>, is_fence : UInt<1>, is_fencei : UInt<1>, is_amo : UInt<1>, uses_ldq : UInt<1>, uses_stq : UInt<1>, is_sys_pc2epc : UInt<1>, is_unique : UInt<1>, flush_on_commit : UInt<1>, ldst_is_rs1 : UInt<1>, ldst : UInt<6>, lrs1 : UInt<6>, lrs2 : UInt<6>, lrs3 : UInt<6>, ldst_val : UInt<1>, dst_rtype : UInt<2>, lrs1_rtype : UInt<2>, lrs2_rtype : UInt<2>, frs3_en : UInt<1>, fp_val : UInt<1>, fp_single : UInt<1>, xcpt_pf_if : UInt<1>, xcpt_ae_if : UInt<1>, xcpt_ma_if : UInt<1>, bp_debug_if : UInt<1>, bp_xcpt_if : UInt<1>, debug_fsrc : UInt<2>, debug_tsrc : UInt<2>}, data : UInt<65>, predicated : UInt<1>, fflags : {valid : UInt<1>, bits : {uop : {uopc : UInt<7>, inst : UInt<32>, debug_inst : UInt<32>, is_rvc : UInt<1>, debug_pc : UInt<40>, iq_type : UInt<3>, fu_code : UInt<10>, ctrl : {br_type : UInt<4>, op1_sel : UInt<2>, op2_sel : UInt<3>, imm_sel : UInt<3>, op_fcn : UInt<4>, fcn_dw : UInt<1>, csr_cmd : UInt<3>, is_load : UInt<1>, is_sta : UInt<1>, is_std : UInt<1>}, iw_state : UInt<2>, iw_p1_poisoned : UInt<1>, iw_p2_poisoned : UInt<1>, is_br : UInt<1>, is_jalr : UInt<1>, is_jal : UInt<1>, is_sfb : UInt<1>, br_mask : UInt<8>, br_tag : UInt<3>, ftq_idx : UInt<4>, edge_inst : UInt<1>, pc_lob : UInt<6>, taken : UInt<1>, imm_packed : UInt<20>, csr_addr : UInt<12>, rob_idx : UInt<5>, ldq_idx : UInt<3>, stq_idx : UInt<3>, rxq_idx : UInt<2>, pdst : UInt<6>, prs1 : UInt<6>, prs2 : UInt<6>, prs3 : UInt<6>, ppred : UInt<4>, prs1_busy : UInt<1>, prs2_busy : UInt<1>, prs3_busy : UInt<1>, ppred_busy : UInt<1>, stale_pdst : UInt<6>, exception : UInt<1>, exc_cause : UInt<64>, bypassable : UInt<1>, mem_cmd : UInt<5>, mem_size : UInt<2>, mem_signed : UInt<1>, is_fence : UInt<1>, is_fencei : UInt<1>, is_amo : UInt<1>, uses_ldq : UInt<1>, uses_stq : UInt<1>, is_sys_pc2epc : UInt<1>, is_unique : UInt<1>, flush_on_commit : UInt<1>, ldst_is_rs1 : UInt<1>, ldst : UInt<6>, lrs1 : UInt<6>, lrs2 : UInt<6>, lrs3 : UInt<6>, ldst_val : UInt<1>, dst_rtype : UInt<2>, lrs1_rtype : UInt<2>, lrs2_rtype : UInt<2>, frs3_en : UInt<1>, fp_val : UInt<1>, fp_single : UInt<1>, xcpt_pf_if : UInt<1>, xcpt_ae_if : UInt<1>, xcpt_ma_if : UInt<1>, bp_debug_if : UInt<1>, bp_xcpt_if : UInt<1>, debug_fsrc : UInt<2>, debug_tsrc : UInt<2>}, flags : UInt<5>}}}}[0], flip status : {debug : UInt<1>, cease : UInt<1>, wfi : UInt<1>, isa : UInt<32>, dprv : UInt<2>, prv : UInt<2>, sd : UInt<1>, zero2 : UInt<27>, sxl : UInt<2>, uxl : UInt<2>, sd_rv32 : UInt<1>, zero1 : UInt<8>, tsr : UInt<1>, tw : UInt<1>, tvm : UInt<1>, mxr : UInt<1>, sum : UInt<1>, mprv : UInt<1>, xs : UInt<2>, fs : UInt<2>, mpp : UInt<2>, vs : UInt<2>, spp : UInt<1>, mpie : UInt<1>, hpie : UInt<1>, spie : UInt<1>, upie : UInt<1>, mie : UInt<1>, hie : UInt<1>, sie : UInt<1>, uie : UInt<1>}, flip bp : {control : {ttype : UInt<4>, dmode : UInt<1>, maskmax : UInt<6>, reserved : UInt<40>, action : UInt<1>, chain : UInt<1>, zero : UInt<2>, tmatch : UInt<2>, m : UInt<1>, h : UInt<1>, s : UInt<1>, u : UInt<1>, x : UInt<1>, w : UInt<1>, r : UInt<1>}, address : UInt<39>}[0]}
    
    clock is invalid
    reset is invalid
    io is invalid
    io.req.ready <= UInt<1>("h01") @[functional-unit.scala 223:16]
    node _T = and(io.brupdate.b1.mispredict_mask, io.req.bits.uop.br_mask) @[util.scala 118:51]
    node _T_1 = neq(_T, UInt<1>("h00")) @[util.scala 118:59]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[functional-unit.scala 266:41]
    node _T_3 = and(io.req.valid, _T_2) @[functional-unit.scala 266:38]
    io.resp.valid <= _T_3 @[functional-unit.scala 266:22]
    io.resp.bits.predicated <= UInt<1>("h00") @[functional-unit.scala 267:29]
    io.resp.bits.uop.debug_tsrc <= io.req.bits.uop.debug_tsrc @[functional-unit.scala 268:22]
    io.resp.bits.uop.debug_fsrc <= io.req.bits.uop.debug_fsrc @[functional-unit.scala 268:22]
    io.resp.bits.uop.bp_xcpt_if <= io.req.bits.uop.bp_xcpt_if @[functional-unit.scala 268:22]
    io.resp.bits.uop.bp_debug_if <= io.req.bits.uop.bp_debug_if @[functional-unit.scala 268:22]
    io.resp.bits.uop.xcpt_ma_if <= io.req.bits.uop.xcpt_ma_if @[functional-unit.scala 268:22]
    io.resp.bits.uop.xcpt_ae_if <= io.req.bits.uop.xcpt_ae_if @[functional-unit.scala 268:22]
    io.resp.bits.uop.xcpt_pf_if <= io.req.bits.uop.xcpt_pf_if @[functional-unit.scala 268:22]
    io.resp.bits.uop.fp_single <= io.req.bits.uop.fp_single @[functional-unit.scala 268:22]
    io.resp.bits.uop.fp_val <= io.req.bits.uop.fp_val @[functional-unit.scala 268:22]
    io.resp.bits.uop.frs3_en <= io.req.bits.uop.frs3_en @[functional-unit.scala 268:22]
    io.resp.bits.uop.lrs2_rtype <= io.req.bits.uop.lrs2_rtype @[functional-unit.scala 268:22]
    io.resp.bits.uop.lrs1_rtype <= io.req.bits.uop.lrs1_rtype @[functional-unit.scala 268:22]
    io.resp.bits.uop.dst_rtype <= io.req.bits.uop.dst_rtype @[functional-unit.scala 268:22]
    io.resp.bits.uop.ldst_val <= io.req.bits.uop.ldst_val @[functional-unit.scala 268:22]
    io.resp.bits.uop.lrs3 <= io.req.bits.uop.lrs3 @[functional-unit.scala 268:22]
    io.resp.bits.uop.lrs2 <= io.req.bits.uop.lrs2 @[functional-unit.scala 268:22]
    io.resp.bits.uop.lrs1 <= io.req.bits.uop.lrs1 @[functional-unit.scala 268:22]
    io.resp.bits.uop.ldst <= io.req.bits.uop.ldst @[functional-unit.scala 268:22]
    io.resp.bits.uop.ldst_is_rs1 <= io.req.bits.uop.ldst_is_rs1 @[functional-unit.scala 268:22]
    io.resp.bits.uop.flush_on_commit <= io.req.bits.uop.flush_on_commit @[functional-unit.scala 268:22]
    io.resp.bits.uop.is_unique <= io.req.bits.uop.is_unique @[functional-unit.scala 268:22]
    io.resp.bits.uop.is_sys_pc2epc <= io.req.bits.uop.is_sys_pc2epc @[functional-unit.scala 268:22]
    io.resp.bits.uop.uses_stq <= io.req.bits.uop.uses_stq @[functional-unit.scala 268:22]
    io.resp.bits.uop.uses_ldq <= io.req.bits.uop.uses_ldq @[functional-unit.scala 268:22]
    io.resp.bits.uop.is_amo <= io.req.bits.uop.is_amo @[functional-unit.scala 268:22]
    io.resp.bits.uop.is_fencei <= io.req.bits.uop.is_fencei @[functional-unit.scala 268:22]
    io.resp.bits.uop.is_fence <= io.req.bits.uop.is_fence @[functional-unit.scala 268:22]
    io.resp.bits.uop.mem_signed <= io.req.bits.uop.mem_signed @[functional-unit.scala 268:22]
    io.resp.bits.uop.mem_size <= io.req.bits.uop.mem_size @[functional-unit.scala 268:22]
    io.resp.bits.uop.mem_cmd <= io.req.bits.uop.mem_cmd @[functional-unit.scala 268:22]
    io.resp.bits.uop.bypassable <= io.req.bits.uop.bypassable @[functional-unit.scala 268:22]
    io.resp.bits.uop.exc_cause <= io.req.bits.uop.exc_cause @[functional-unit.scala 268:22]
    io.resp.bits.uop.exception <= io.req.bits.uop.exception @[functional-unit.scala 268:22]
    io.resp.bits.uop.stale_pdst <= io.req.bits.uop.stale_pdst @[functional-unit.scala 268:22]
    io.resp.bits.uop.ppred_busy <= io.req.bits.uop.ppred_busy @[functional-unit.scala 268:22]
    io.resp.bits.uop.prs3_busy <= io.req.bits.uop.prs3_busy @[functional-unit.scala 268:22]
    io.resp.bits.uop.prs2_busy <= io.req.bits.uop.prs2_busy @[functional-unit.scala 268:22]
    io.resp.bits.uop.prs1_busy <= io.req.bits.uop.prs1_busy @[functional-unit.scala 268:22]
    io.resp.bits.uop.ppred <= io.req.bits.uop.ppred @[functional-unit.scala 268:22]
    io.resp.bits.uop.prs3 <= io.req.bits.uop.prs3 @[functional-unit.scala 268:22]
    io.resp.bits.uop.prs2 <= io.req.bits.uop.prs2 @[functional-unit.scala 268:22]
    io.resp.bits.uop.prs1 <= io.req.bits.uop.prs1 @[functional-unit.scala 268:22]
    io.resp.bits.uop.pdst <= io.req.bits.uop.pdst @[functional-unit.scala 268:22]
    io.resp.bits.uop.rxq_idx <= io.req.bits.uop.rxq_idx @[functional-unit.scala 268:22]
    io.resp.bits.uop.stq_idx <= io.req.bits.uop.stq_idx @[functional-unit.scala 268:22]
    io.resp.bits.uop.ldq_idx <= io.req.bits.uop.ldq_idx @[functional-unit.scala 268:22]
    io.resp.bits.uop.rob_idx <= io.req.bits.uop.rob_idx @[functional-unit.scala 268:22]
    io.resp.bits.uop.csr_addr <= io.req.bits.uop.csr_addr @[functional-unit.scala 268:22]
    io.resp.bits.uop.imm_packed <= io.req.bits.uop.imm_packed @[functional-unit.scala 268:22]
    io.resp.bits.uop.taken <= io.req.bits.uop.taken @[functional-unit.scala 268:22]
    io.resp.bits.uop.pc_lob <= io.req.bits.uop.pc_lob @[functional-unit.scala 268:22]
    io.resp.bits.uop.edge_inst <= io.req.bits.uop.edge_inst @[functional-unit.scala 268:22]
    io.resp.bits.uop.ftq_idx <= io.req.bits.uop.ftq_idx @[functional-unit.scala 268:22]
    io.resp.bits.uop.br_tag <= io.req.bits.uop.br_tag @[functional-unit.scala 268:22]
    io.resp.bits.uop.br_mask <= io.req.bits.uop.br_mask @[functional-unit.scala 268:22]
    io.resp.bits.uop.is_sfb <= io.req.bits.uop.is_sfb @[functional-unit.scala 268:22]
    io.resp.bits.uop.is_jal <= io.req.bits.uop.is_jal @[functional-unit.scala 268:22]
    io.resp.bits.uop.is_jalr <= io.req.bits.uop.is_jalr @[functional-unit.scala 268:22]
    io.resp.bits.uop.is_br <= io.req.bits.uop.is_br @[functional-unit.scala 268:22]
    io.resp.bits.uop.iw_p2_poisoned <= io.req.bits.uop.iw_p2_poisoned @[functional-unit.scala 268:22]
    io.resp.bits.uop.iw_p1_poisoned <= io.req.bits.uop.iw_p1_poisoned @[functional-unit.scala 268:22]
    io.resp.bits.uop.iw_state <= io.req.bits.uop.iw_state @[functional-unit.scala 268:22]
    io.resp.bits.uop.ctrl.is_std <= io.req.bits.uop.ctrl.is_std @[functional-unit.scala 268:22]
    io.resp.bits.uop.ctrl.is_sta <= io.req.bits.uop.ctrl.is_sta @[functional-unit.scala 268:22]
    io.resp.bits.uop.ctrl.is_load <= io.req.bits.uop.ctrl.is_load @[functional-unit.scala 268:22]
    io.resp.bits.uop.ctrl.csr_cmd <= io.req.bits.uop.ctrl.csr_cmd @[functional-unit.scala 268:22]
    io.resp.bits.uop.ctrl.fcn_dw <= io.req.bits.uop.ctrl.fcn_dw @[functional-unit.scala 268:22]
    io.resp.bits.uop.ctrl.op_fcn <= io.req.bits.uop.ctrl.op_fcn @[functional-unit.scala 268:22]
    io.resp.bits.uop.ctrl.imm_sel <= io.req.bits.uop.ctrl.imm_sel @[functional-unit.scala 268:22]
    io.resp.bits.uop.ctrl.op2_sel <= io.req.bits.uop.ctrl.op2_sel @[functional-unit.scala 268:22]
    io.resp.bits.uop.ctrl.op1_sel <= io.req.bits.uop.ctrl.op1_sel @[functional-unit.scala 268:22]
    io.resp.bits.uop.ctrl.br_type <= io.req.bits.uop.ctrl.br_type @[functional-unit.scala 268:22]
    io.resp.bits.uop.fu_code <= io.req.bits.uop.fu_code @[functional-unit.scala 268:22]
    io.resp.bits.uop.iq_type <= io.req.bits.uop.iq_type @[functional-unit.scala 268:22]
    io.resp.bits.uop.debug_pc <= io.req.bits.uop.debug_pc @[functional-unit.scala 268:22]
    io.resp.bits.uop.is_rvc <= io.req.bits.uop.is_rvc @[functional-unit.scala 268:22]
    io.resp.bits.uop.debug_inst <= io.req.bits.uop.debug_inst @[functional-unit.scala 268:22]
    io.resp.bits.uop.inst <= io.req.bits.uop.inst @[functional-unit.scala 268:22]
    io.resp.bits.uop.uopc <= io.req.bits.uop.uopc @[functional-unit.scala 268:22]
    node _T_4 = not(io.brupdate.b1.resolve_mask) @[util.scala 85:27]
    node _T_5 = and(io.req.bits.uop.br_mask, _T_4) @[util.scala 85:25]
    io.resp.bits.uop.br_mask <= _T_5 @[functional-unit.scala 269:30]
    node _T_6 = asSInt(io.req.bits.rs1_data) @[functional-unit.scala 484:35]
    node _T_7 = bits(io.req.bits.uop.imm_packed, 19, 8) @[functional-unit.scala 484:70]
    node _T_8 = asSInt(_T_7) @[functional-unit.scala 484:77]
    node _T_9 = add(_T_6, _T_8) @[functional-unit.scala 484:42]
    node _T_10 = tail(_T_9, 1) @[functional-unit.scala 484:42]
    node _T_11 = asSInt(_T_10) @[functional-unit.scala 484:42]
    node sum = asUInt(_T_11) @[functional-unit.scala 484:85]
    node _T_12 = bits(sum, 38, 38) @[functional-unit.scala 485:24]
    node _T_13 = bits(sum, 63, 39) @[functional-unit.scala 485:43]
    node _T_14 = not(_T_13) @[functional-unit.scala 485:39]
    node _T_15 = eq(_T_14, UInt<1>("h00")) @[functional-unit.scala 485:58]
    node _T_16 = bits(sum, 63, 39) @[functional-unit.scala 486:43]
    node _T_17 = neq(_T_16, UInt<1>("h00")) @[functional-unit.scala 486:58]
    node ea_sign = mux(_T_12, _T_15, _T_17) @[functional-unit.scala 485:20]
    node _T_18 = bits(sum, 38, 0) @[functional-unit.scala 487:43]
    node effective_address = cat(ea_sign, _T_18) @[Cat.scala 29:58]
    io.resp.bits.addr <= effective_address @[functional-unit.scala 491:21]
    io.resp.bits.data <= io.req.bits.rs2_data @[functional-unit.scala 492:21]
    node _T_19 = and(io.req.valid, io.req.bits.uop.ctrl.is_std) @[functional-unit.scala 495:28]
    node _T_20 = bits(io.resp.bits.data, 64, 64) @[functional-unit.scala 496:24]
    node _T_21 = bits(_T_20, 0, 0) @[functional-unit.scala 496:29]
    node _T_22 = eq(_T_21, UInt<1>("h01")) @[functional-unit.scala 496:36]
    node _T_23 = and(_T_19, _T_22) @[functional-unit.scala 495:59]
    node _T_24 = eq(_T_23, UInt<1>("h00")) @[functional-unit.scala 495:13]
    node _T_25 = bits(reset, 0, 0) @[functional-unit.scala 495:12]
    node _T_26 = or(_T_24, _T_25) @[functional-unit.scala 495:12]
    node _T_27 = eq(_T_26, UInt<1>("h00")) @[functional-unit.scala 495:12]
    when _T_27 : @[functional-unit.scala 495:12]
      printf(clock, UInt<1>(1), "Assertion failed: 65th bit set in MemAddrCalcUnit.\n    at functional-unit.scala:495 assert (!(io.req.valid && io.req.bits.uop.ctrl.is_std &&\n") @[functional-unit.scala 495:12]
      stop(clock, UInt<1>(1), 1) @[functional-unit.scala 495:12]
      skip @[functional-unit.scala 495:12]
    node _T_28 = and(io.req.valid, io.req.bits.uop.ctrl.is_std) @[functional-unit.scala 498:28]
    node _T_29 = and(_T_28, io.req.bits.uop.fp_val) @[functional-unit.scala 498:59]
    node _T_30 = eq(_T_29, UInt<1>("h00")) @[functional-unit.scala 498:13]
    node _T_31 = bits(reset, 0, 0) @[functional-unit.scala 498:12]
    node _T_32 = or(_T_30, _T_31) @[functional-unit.scala 498:12]
    node _T_33 = eq(_T_32, UInt<1>("h00")) @[functional-unit.scala 498:12]
    when _T_33 : @[functional-unit.scala 498:12]
      printf(clock, UInt<1>(1), "Assertion failed: FP store-data should now be going through a different unit.\n    at functional-unit.scala:498 assert (!(io.req.valid && io.req.bits.uop.ctrl.is_std && io.req.bits.uop.fp_val),\n") @[functional-unit.scala 498:12]
      stop(clock, UInt<1>(1), 1) @[functional-unit.scala 498:12]
      skip @[functional-unit.scala 498:12]
    node _T_34 = and(io.req.bits.uop.fp_val, io.req.valid) @[functional-unit.scala 502:36]
    node _T_35 = neq(io.req.bits.uop.uopc, UInt<7>("h01")) @[functional-unit.scala 502:76]
    node _T_36 = and(_T_34, _T_35) @[functional-unit.scala 502:52]
    node _T_37 = neq(io.req.bits.uop.uopc, UInt<7>("h02")) @[functional-unit.scala 503:41]
    node _T_38 = and(_T_36, _T_37) @[functional-unit.scala 503:17]
    node _T_39 = eq(_T_38, UInt<1>("h00")) @[functional-unit.scala 502:11]
    node _T_40 = bits(reset, 0, 0) @[functional-unit.scala 502:10]
    node _T_41 = or(_T_39, _T_40) @[functional-unit.scala 502:10]
    node _T_42 = eq(_T_41, UInt<1>("h00")) @[functional-unit.scala 502:10]
    when _T_42 : @[functional-unit.scala 502:10]
      printf(clock, UInt<1>(1), "Assertion failed: [maddrcalc] assert we never get store data in here.\n    at functional-unit.scala:502 assert (!(io.req.bits.uop.fp_val && io.req.valid && io.req.bits.uop.uopc =/=\n") @[functional-unit.scala 502:10]
      stop(clock, UInt<1>(1), 1) @[functional-unit.scala 502:10]
      skip @[functional-unit.scala 502:10]
    node _T_43 = eq(io.req.bits.uop.mem_size, UInt<1>("h01")) @[functional-unit.scala 509:11]
    node _T_44 = bits(effective_address, 0, 0) @[functional-unit.scala 509:40]
    node _T_45 = neq(_T_44, UInt<1>("h00")) @[functional-unit.scala 509:44]
    node _T_46 = and(_T_43, _T_45) @[functional-unit.scala 509:19]
    node _T_47 = eq(io.req.bits.uop.mem_size, UInt<2>("h02")) @[functional-unit.scala 510:11]
    node _T_48 = bits(effective_address, 1, 0) @[functional-unit.scala 510:40]
    node _T_49 = neq(_T_48, UInt<1>("h00")) @[functional-unit.scala 510:46]
    node _T_50 = and(_T_47, _T_49) @[functional-unit.scala 510:19]
    node _T_51 = or(_T_46, _T_50) @[functional-unit.scala 509:54]
    node _T_52 = eq(io.req.bits.uop.mem_size, UInt<2>("h03")) @[functional-unit.scala 511:11]
    node _T_53 = bits(effective_address, 2, 0) @[functional-unit.scala 511:40]
    node _T_54 = neq(_T_53, UInt<1>("h00")) @[functional-unit.scala 511:46]
    node _T_55 = and(_T_52, _T_54) @[functional-unit.scala 511:19]
    node misaligned = or(_T_51, _T_55) @[functional-unit.scala 510:56]
    inst bkptu of BreakpointUnit_4 @[functional-unit.scala 513:21]
    bkptu.clock <= clock
    bkptu.reset <= reset
    bkptu.io.status.uie <= io.status.uie @[functional-unit.scala 514:19]
    bkptu.io.status.sie <= io.status.sie @[functional-unit.scala 514:19]
    bkptu.io.status.hie <= io.status.hie @[functional-unit.scala 514:19]
    bkptu.io.status.mie <= io.status.mie @[functional-unit.scala 514:19]
    bkptu.io.status.upie <= io.status.upie @[functional-unit.scala 514:19]
    bkptu.io.status.spie <= io.status.spie @[functional-unit.scala 514:19]
    bkptu.io.status.hpie <= io.status.hpie @[functional-unit.scala 514:19]
    bkptu.io.status.mpie <= io.status.mpie @[functional-unit.scala 514:19]
    bkptu.io.status.spp <= io.status.spp @[functional-unit.scala 514:19]
    bkptu.io.status.vs <= io.status.vs @[functional-unit.scala 514:19]
    bkptu.io.status.mpp <= io.status.mpp @[functional-unit.scala 514:19]
    bkptu.io.status.fs <= io.status.fs @[functional-unit.scala 514:19]
    bkptu.io.status.xs <= io.status.xs @[functional-unit.scala 514:19]
    bkptu.io.status.mprv <= io.status.mprv @[functional-unit.scala 514:19]
    bkptu.io.status.sum <= io.status.sum @[functional-unit.scala 514:19]
    bkptu.io.status.mxr <= io.status.mxr @[functional-unit.scala 514:19]
    bkptu.io.status.tvm <= io.status.tvm @[functional-unit.scala 514:19]
    bkptu.io.status.tw <= io.status.tw @[functional-unit.scala 514:19]
    bkptu.io.status.tsr <= io.status.tsr @[functional-unit.scala 514:19]
    bkptu.io.status.zero1 <= io.status.zero1 @[functional-unit.scala 514:19]
    bkptu.io.status.sd_rv32 <= io.status.sd_rv32 @[functional-unit.scala 514:19]
    bkptu.io.status.uxl <= io.status.uxl @[functional-unit.scala 514:19]
    bkptu.io.status.sxl <= io.status.sxl @[functional-unit.scala 514:19]
    bkptu.io.status.zero2 <= io.status.zero2 @[functional-unit.scala 514:19]
    bkptu.io.status.sd <= io.status.sd @[functional-unit.scala 514:19]
    bkptu.io.status.prv <= io.status.prv @[functional-unit.scala 514:19]
    bkptu.io.status.dprv <= io.status.dprv @[functional-unit.scala 514:19]
    bkptu.io.status.isa <= io.status.isa @[functional-unit.scala 514:19]
    bkptu.io.status.wfi <= io.status.wfi @[functional-unit.scala 514:19]
    bkptu.io.status.cease <= io.status.cease @[functional-unit.scala 514:19]
    bkptu.io.status.debug <= io.status.debug @[functional-unit.scala 514:19]
    bkptu.io.pc is invalid @[functional-unit.scala 516:19]
    bkptu.io.ea <= effective_address @[functional-unit.scala 517:19]
    node _T_56 = eq(io.req.bits.uop.uopc, UInt<7>("h01")) @[functional-unit.scala 519:53]
    node _T_57 = and(io.req.valid, _T_56) @[functional-unit.scala 519:29]
    node ma_ld = and(_T_57, misaligned) @[functional-unit.scala 519:63]
    node _T_58 = eq(io.req.bits.uop.uopc, UInt<7>("h02")) @[functional-unit.scala 520:54]
    node _T_59 = eq(io.req.bits.uop.uopc, UInt<7>("h043")) @[functional-unit.scala 520:89]
    node _T_60 = or(_T_58, _T_59) @[functional-unit.scala 520:65]
    node _T_61 = and(io.req.valid, _T_60) @[functional-unit.scala 520:29]
    node ma_st = and(_T_61, misaligned) @[functional-unit.scala 520:104]
    node _T_62 = eq(io.req.bits.uop.uopc, UInt<7>("h01")) @[functional-unit.scala 521:55]
    node _T_63 = and(_T_62, bkptu.io.debug_ld) @[functional-unit.scala 521:66]
    node _T_64 = eq(io.req.bits.uop.uopc, UInt<7>("h02")) @[functional-unit.scala 522:55]
    node _T_65 = and(_T_64, bkptu.io.debug_st) @[functional-unit.scala 522:66]
    node _T_66 = or(_T_63, _T_65) @[functional-unit.scala 521:88]
    node dbg_bp = and(io.req.valid, _T_66) @[functional-unit.scala 521:29]
    node _T_67 = eq(io.req.bits.uop.uopc, UInt<7>("h01")) @[functional-unit.scala 523:55]
    node _T_68 = and(_T_67, bkptu.io.xcpt_ld) @[functional-unit.scala 523:66]
    node _T_69 = eq(io.req.bits.uop.uopc, UInt<7>("h02")) @[functional-unit.scala 524:55]
    node _T_70 = and(_T_69, bkptu.io.xcpt_st) @[functional-unit.scala 524:66]
    node _T_71 = or(_T_68, _T_70) @[functional-unit.scala 523:87]
    node bp = and(io.req.valid, _T_71) @[functional-unit.scala 523:29]
    node _T_72 = or(ma_ld, ma_st) @[functional-unit.scala 527:26]
    node _T_73 = or(_T_72, dbg_bp) @[functional-unit.scala 527:26]
    node xcpt_val = or(_T_73, bp) @[functional-unit.scala 527:26]
    node _T_74 = mux(dbg_bp, UInt<4>("h0e"), UInt<2>("h03")) @[Mux.scala 47:69]
    node _T_75 = mux(ma_st, UInt<3>("h06"), _T_74) @[Mux.scala 47:69]
    node xcpt_cause = mux(ma_ld, UInt<3>("h04"), _T_75) @[Mux.scala 47:69]
    io.resp.bits.mxcpt.valid <= xcpt_val @[functional-unit.scala 534:28]
    io.resp.bits.mxcpt.bits <= xcpt_cause @[functional-unit.scala 535:28]
    node _T_76 = and(ma_ld, ma_st) @[functional-unit.scala 536:19]
    node _T_77 = eq(_T_76, UInt<1>("h00")) @[functional-unit.scala 536:11]
    node _T_78 = bits(reset, 0, 0) @[functional-unit.scala 536:10]
    node _T_79 = or(_T_77, _T_78) @[functional-unit.scala 536:10]
    node _T_80 = eq(_T_79, UInt<1>("h00")) @[functional-unit.scala 536:10]
    when _T_80 : @[functional-unit.scala 536:10]
      printf(clock, UInt<1>(1), "Assertion failed: Mutually-exclusive exceptions are firing.\n    at functional-unit.scala:536 assert (!(ma_ld && ma_st), \"Mutually-exclusive exceptions are firing.\")\n") @[functional-unit.scala 536:10]
      stop(clock, UInt<1>(1), 1) @[functional-unit.scala 536:10]
      skip @[functional-unit.scala 536:10]
    node _T_81 = eq(io.req.bits.uop.mem_cmd, UInt<5>("h014")) @[functional-unit.scala 538:72]
    node _T_82 = and(io.req.valid, _T_81) @[functional-unit.scala 538:45]
    io.resp.bits.sfence.valid <= _T_82 @[functional-unit.scala 538:29]
    node _T_83 = bits(io.req.bits.uop.mem_size, 0, 0) @[functional-unit.scala 539:59]
    io.resp.bits.sfence.bits.rs1 <= _T_83 @[functional-unit.scala 539:32]
    node _T_84 = bits(io.req.bits.uop.mem_size, 1, 1) @[functional-unit.scala 540:59]
    io.resp.bits.sfence.bits.rs2 <= _T_84 @[functional-unit.scala 540:32]
    io.resp.bits.sfence.bits.addr <= io.req.bits.rs1_data @[functional-unit.scala 541:33]
    io.resp.bits.sfence.bits.asid <= io.req.bits.rs2_data @[functional-unit.scala 542:33]
    
